This file is a comprehensive codebase snapshot for the BowersWorld-com project, generated to facilitate analysis and development.

================================================================
File Summary
================================================================

Purpose:
--------
This document provides a consolidated view of the project's source code, scripts,
HTML, and text files, excluding any files specified in the .gitignore file. 
It serves as a reference for developers, making it easier to understand the 
codebase structure and functionality in a single document.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
5. List of Program files
6. List of Documents

================================================================
Directory Structure
================================================================
.
‚îú‚îÄ‚îÄ ./alexandria_config.json
‚îú‚îÄ‚îÄ ./Assets
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Assets/arrow.png
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Assets/BowersWorld.png
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Assets/exit.png
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Assets/hide.png
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Assets/icon.png
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Assets/icons
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Assets/library
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Assets/Max.png
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./Assets/my_library.db
‚îú‚îÄ‚îÄ ./BowersWorldSetup.py
‚îú‚îÄ‚îÄ ./Config
‚îú‚îÄ‚îÄ ./CreateLibraryCSV
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./CreateLibraryCSV/Complete Anderson's Library Collection Analysis.py
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./CreateLibraryCSV/Resumable PDF Metadata Extractor.py
‚îú‚îÄ‚îÄ ./CreateThumbs
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./CreateThumbs/ConvertToThumbnailsPart2.py
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./CreateThumbs/ConvertToThumbnails.py
‚îú‚îÄ‚îÄ ./Data
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Data/Books
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./Data/Database
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ ./Data/Database/BowersWorld.db
‚îú‚îÄ‚îÄ ./DigitalAlexandria.py
‚îú‚îÄ‚îÄ ./index.html
‚îú‚îÄ‚îÄ ./Legacy
‚îú‚îÄ‚îÄ ./library
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./library/admin
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./library/app
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./library/assets
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./library/auth
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./library/auth/login.html
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./library/auth/register.html
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./library/css
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./library/index.html
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./library/js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./library/js/GoogleDriveAuth.js
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./library/setup
‚îú‚îÄ‚îÄ ./README.md
‚îú‚îÄ‚îÄ ./requirements.txt
‚îú‚îÄ‚îÄ ./Scripts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Scripts/Deployment
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Scripts/Development
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Scripts/Maintenance
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Scripts/Migration
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./Scripts/System
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ./Scripts/System/CodebaseSum.py
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ./Scripts/System/GitHubAutoUpdate.py
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ./Scripts/System/GitHubUpdateSite.py
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ./Scripts/System/MarkdownToText.py
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ./Scripts/System/UpdateFiles.py
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ ./Scripts/System/update_site.bat
‚îú‚îÄ‚îÄ ./search_engine_config.json
‚îú‚îÄ‚îÄ ./shared
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./shared/css
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./shared/css/himalaya-theme.css
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./shared/js
‚îú‚îÄ‚îÄ ./Source
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Source/AI
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Source/Core
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ./Source/Interface
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ./Source/Plugins
‚îú‚îÄ‚îÄ ./Tests
‚îú‚îÄ‚îÄ ./Updates
‚îî‚îÄ‚îÄ ./WebPages
    ‚îú‚îÄ‚îÄ ./WebPages/Components
    ‚îî‚îÄ‚îÄ ./WebPages/Templates

38 directories, 30 files

================================================================
Files
================================================================

================
File: BowersWorldSetup.py
================
#!/usr/bin/env python3
"""
File: BowersWorldSetup.py
Path: BowersWorld-com/BowersWorldSetup.py
Standard: AIDEV-PascalCase-1.7
Created: 2025-06-27  11:30
Modified: 2025-06-27  11:30
Author: Herb Bowers - Project Himalaya
Contact: HimalayaProject1@gmail.com
Description: BowersWorld-com Project Foundation Setup Script (Digital Alexandria Architecture)

Purpose: Creates the complete BowersWorld-com project structure from scratch,
following AIDEV-PascalCase-1.7 standards and implementing the Digital Alexandria
blueprint architecture. Migrates existing Andy.py desktop functionality to modern
web-based library system with AI-powered features.

Dependencies: Python 3.9+, required packages installed automatically
Output: Complete BowersWorld-com project structure ready for development
"""

import os
import sys
import json
import shutil
import sqlite3
import subprocess
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple

class BowersWorldSetup:
    """
    BowersWorld-com Project Foundation Builder (Digital Alexandria Architecture)
    
    Creates complete project structure following AIDEV-PascalCase-1.7 standards
    and Digital Alexandria blueprint architecture specifications.
    """
    
    def __init__(self, ProjectPath: str = "BowersWorld-com"):
        """Initialize setup with project configuration"""
        self.ProjectPath = Path(ProjectPath).resolve()
        self.Timestamp = datetime.now()
        self.TimestampStr = self.Timestamp.strftime("%Y-%m-%d  %H:%M")
        self.LogMessages: List[str] = []
        
        # Digital Alexandria Architecture Components
        self.CoreComponents = {
            "Foundation": ["Database", "Search", "API", "Auth"],
            "Intelligence": ["AI", "Classification", "Discovery", "Analytics"], 
            "Interface": ["Web", "Mobile", "Desktop", "Plugins"],
            "Collaboration": ["Users", "Annotations", "Collections", "Social"],
            "Innovation": ["Research", "Assistant", "Extensions", "Future"]
        }
        
        print("üèõÔ∏è BowersWorld-com Foundation Builder (Digital Alexandria Architecture)")
        print("=" * 60)
        print(f"üìÅ Project Path: {self.ProjectPath}")
        print(f"‚è∞ Timestamp: {self.TimestampStr}")
        print()

    def CreateProjectStructure(self) -> bool:
        """Create complete Digital Alexandria project directory structure"""
        try:
            print("üìÅ Creating BowersWorld-com Project Structure (Digital Alexandria Architecture)...")
            
            # Main project directories following blueprint architecture
            MainDirectories = [
                # Core Foundation Layer
                "Source/Core/Database",
                "Source/Core/Search", 
                "Source/Core/API",
                "Source/Core/Authentication",
                
                # AI Intelligence Layer
                "Source/AI/Classification",
                "Source/AI/Discovery", 
                "Source/AI/Analytics",
                "Source/AI/Models",
                "Source/AI/Training",
                
                # User Interface Layer
                "Source/Interface/Web/Components",
                "Source/Interface/Web/Pages", 
                "Source/Interface/Web/Assets",
                "Source/Interface/Desktop",
                "Source/Interface/Mobile",
                "Source/Interface/API",
                
                # Collaboration Features
                "Source/Collaboration/Users",
                "Source/Collaboration/Annotations",
                "Source/Collaboration/Collections", 
                "Source/Collaboration/Social",
                
                # Plugin & Extension System
                "Source/Plugins/Classification",
                "Source/Plugins/Search",
                "Source/Plugins/Analysis",
                "Source/Plugins/Export",
                "Source/Plugins/Import",
                
                # Data & Configuration
                "Data/Database",
                "Data/Books", 
                "Data/Covers",
                "Data/Thumbnails",
                "Data/Cache",
                "Data/Backups",
                
                # Configuration & Settings
                "Config/Development",
                "Config/Production", 
                "Config/Testing",
                "Config/Deployment",
                
                # Documentation & Standards
                "Documentation/API",
                "Documentation/Architecture",
                "Documentation/Standards", 
                "Documentation/Guides",
                "Documentation/Research",
                
                # Testing Infrastructure
                "Tests/Unit",
                "Tests/Integration",
                "Tests/Performance",
                "Tests/Data",
                
                # Scripts & Utilities
                "Scripts/Migration",
                "Scripts/Development",
                "Scripts/Deployment",
                "Scripts/Maintenance",
                
                # Legacy Integration
                "Legacy/Andy",
                "Legacy/Migration",
                "Legacy/Archive"
            ]
            
            # Create all directories
            for Directory in MainDirectories:
                DirectoryPath = self.ProjectPath / Directory
                DirectoryPath.mkdir(parents=True, exist_ok=True)
                self.LogMessages.append(f"‚úÖ Created: {Directory}")
            
            print(f"   ‚úÖ Created {len(MainDirectories)} directories")
            return True
            
        except Exception as Error:
            print(f"   ‚ùå Error creating directories: {Error}")
            return False

    def CreateConfigurationFiles(self) -> bool:
        """Create all Digital Alexandria configuration files"""
        try:
            print("‚öôÔ∏è Creating Configuration Files...")
            
            # Main project configuration
            ProjectConfig = {
                "project": {
                    "name": "BowersWorld-com",
                    "codename": "Digital Alexandria",
                    "version": "1.0.0", 
                    "description": "Complete Digital Library System",
                    "author": "Herb Bowers - Project Himalaya",
                    "contact": "HimalayaProject1@gmail.com",
                    "standard": "AIDEV-PascalCase-1.7",
                    "created": self.TimestampStr,
                    "modified": self.TimestampStr
                },
                "architecture": {
                    "pattern": "Layered Architecture",
                    "database": "SQLite + Full-Text Search",
                    "ai_engine": "Multi-Model Ensemble", 
                    "web_framework": "FastAPI + React",
                    "desktop_legacy": "PySide6 (Andy.py)",
                    "plugin_system": "Hook-based Extensions"
                },
                "features": {
                    "ai_classification": True,
                    "semantic_search": True, 
                    "knowledge_graphs": True,
                    "collaboration": True,
                    "multi_user": True,
                    "mobile_support": True,
                    "plugin_system": True,
                    "api_access": True
                }
            }
            
            # Development environment configuration
            DevelopmentConfig = {
                "environment": "development",
                "debug": True,
                "database": {
                    "url": "sqlite:///Data/Database/BowersWorld_dev.db",
                    "backup_interval": 3600,
                    "migration_auto": True
                },
                "ai": {
                    "models_path": "Source/AI/Models",
                    "training_data": "Data/Training", 
                    "cache_size": "1GB",
                    "gpu_enabled": True
                },
                "web": {
                    "host": "localhost",
                    "port": 8000,
                    "hot_reload": True,
                    "cors_enabled": True
                },
                "logging": {
                    "level": "DEBUG",
                    "file": "Logs/alexandria_dev.log",
                    "console": True
                }
            }
            
            # Production configuration template
            ProductionConfig = {
                "environment": "production", 
                "debug": False,
                "database": {
                    "url": "sqlite:///Data/Database/BowersWorld.db",
                    "backup_interval": 1800,
                    "migration_auto": False
                },
                "security": {
                    "secret_key": "CHANGE_THIS_IN_PRODUCTION",
                    "session_timeout": 3600,
                    "rate_limiting": True,
                    "https_only": True
                },
                "performance": {
                    "cache_size": "2GB", 
                    "workers": 4,
                    "connection_pool": 20
                }
            }
            
            # Python requirements
            RequirementsList = [
                "# BowersWorld-com Core Dependencies (Digital Alexandria Architecture)",
                "fastapi>=0.104.1",
                "uvicorn[standard]>=0.24.0",
                "sqlalchemy>=2.0.0",
                
                "# AI & Machine Learning",
                "transformers>=4.35.0", 
                "torch>=2.1.0",
                "scikit-learn>=1.3.0",
                "nltk>=3.8.1",
                "spacy>=3.7.0",
                
                "# Web & API",
                "jinja2>=3.1.2",
                "python-multipart>=0.0.6",
                "python-jose[cryptography]>=3.3.0",
                
                "# Data Processing", 
                "pandas>=2.1.0",
                "numpy>=1.25.0",
                "pillow>=10.0.0",
                "PyPDF2>=3.0.1",
                
                "# Legacy Desktop Integration",
                "PySide6>=6.6.0",
                
                "# Development Tools",
                "pytest>=7.4.0",
                "pytest-asyncio>=0.21.0", 
                "black>=23.0.0",
                "isort>=5.12.0",
                
                "# Optional Enhancements",
                "redis>=5.0.0  # For caching",
                "celery>=5.3.0  # For background tasks"
            ]
            
            # Write configuration files
            ConfigFiles = [
                ("alexandria_config.json", ProjectConfig),
                ("Config/Development/config.json", DevelopmentConfig), 
                ("Config/Production/config.json", ProductionConfig),
                ("requirements.txt", "\n".join(RequirementsList))
            ]
            
            for FileName, Content in ConfigFiles:
                FilePath = self.ProjectPath / FileName
                FilePath.parent.mkdir(parents=True, exist_ok=True)
                
                if FileName.endswith('.json'):
                    with open(FilePath, 'w', encoding='utf-8') as File:
                        json.dump(Content, File, indent=2)
                else:
                    with open(FilePath, 'w', encoding='utf-8') as File:
                        File.write(Content)
                        
                self.LogMessages.append(f"‚úÖ Created: {FileName}")
            
            print(f"   ‚úÖ Created {len(ConfigFiles)} configuration files")
            return True
            
        except Exception as Error:
            print(f"   ‚ùå Error creating configuration: {Error}")
            return False

    def CreateFoundationDatabase(self) -> bool:
        """Create Digital Alexandria v2.0 database schema"""
        try:
            print("üóÑÔ∏è Creating BowersWorld-com Database v2.0 (Digital Alexandria Architecture)...")
            
            DatabasePath = self.ProjectPath / "Data/Database/BowersWorld.db"
            DatabasePath.parent.mkdir(parents=True, exist_ok=True)
            
            # Connect and create schema
            Connection = sqlite3.connect(DatabasePath)
            Cursor = Connection.cursor()
            
            # Enable foreign keys and full-text search
            Cursor.execute("PRAGMA foreign_keys = ON")
            Cursor.execute("PRAGMA journal_mode = WAL")
            
            # Core Books table with enhanced metadata
            Cursor.execute("""
                CREATE TABLE IF NOT EXISTS Books (
                    BookID INTEGER PRIMARY KEY AUTOINCREMENT,
                    Title TEXT NOT NULL,
                    Author TEXT,
                    ISBN TEXT,
                    Publisher TEXT,
                    PublishDate TEXT,
                    Language TEXT DEFAULT 'English',
                    PageCount INTEGER,
                    FileSize INTEGER,
                    FilePath TEXT UNIQUE NOT NULL,
                    CoverPath TEXT,
                    ThumbnailPath TEXT,
                    
                    -- Metadata Enhancement
                    Description TEXT,
                    Keywords TEXT,
                    Subjects TEXT,
                    DeweyDecimal TEXT,
                    LibraryOfCongress TEXT,
                    
                    -- AI Analysis Results
                    ReadingLevel REAL,
                    ComplexityScore REAL,
                    TopicVector TEXT, -- JSON array for similarity
                    Categories TEXT,  -- JSON array of classifications
                    
                    -- Quality & Processing
                    QualityScore REAL DEFAULT 0.0,
                    ProcessingStatus TEXT DEFAULT 'pending',
                    LastAnalyzed TEXT,
                    
                    -- System Fields
                    DateAdded TEXT DEFAULT CURRENT_TIMESTAMP,
                    DateModified TEXT DEFAULT CURRENT_TIMESTAMP,
                    Version INTEGER DEFAULT 1,
                    
                    -- User Interaction
                    ViewCount INTEGER DEFAULT 0,
                    Rating REAL DEFAULT 0.0,
                    Notes TEXT
                )
            """)
            
            # Full-Text Search Virtual Table
            Cursor.execute("""
                CREATE VIRTUAL TABLE IF NOT EXISTS BooksFullText USING fts5(
                    Title, Author, Description, Keywords, Subjects, Content,
                    content='Books', content_rowid='BookID'
                )
            """)
            
            # Knowledge Graph - Relationships between books
            Cursor.execute("""
                CREATE TABLE IF NOT EXISTS BookRelationships (
                    RelationshipID INTEGER PRIMARY KEY AUTOINCREMENT,
                    BookID1 INTEGER NOT NULL,
                    BookID2 INTEGER NOT NULL,
                    RelationshipType TEXT NOT NULL, -- 'similar', 'prerequisite', 'follows', 'cites'
                    Strength REAL DEFAULT 0.0, -- 0.0 to 1.0 confidence
                    Source TEXT, -- 'ai', 'user', 'metadata'
                    DateCreated TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (BookID1) REFERENCES Books(BookID),
                    FOREIGN KEY (BookID2) REFERENCES Books(BookID),
                    UNIQUE(BookID1, BookID2, RelationshipType)
                )
            """)
            
            # User Management
            Cursor.execute("""
                CREATE TABLE IF NOT EXISTS Users (
                    UserID INTEGER PRIMARY KEY AUTOINCREMENT,
                    Username TEXT UNIQUE NOT NULL,
                    Email TEXT UNIQUE NOT NULL,
                    PasswordHash TEXT NOT NULL,
                    Role TEXT DEFAULT 'user', -- 'admin', 'user', 'guest'
                    Preferences TEXT, -- JSON for user settings
                    DateCreated TEXT DEFAULT CURRENT_TIMESTAMP,
                    LastLogin TEXT,
                    IsActive BOOLEAN DEFAULT 1
                )
            """)
            
            # User Annotations and Notes
            Cursor.execute("""
                CREATE TABLE IF NOT EXISTS Annotations (
                    AnnotationID INTEGER PRIMARY KEY AUTOINCREMENT,
                    BookID INTEGER NOT NULL,
                    UserID INTEGER NOT NULL,
                    PageNumber INTEGER,
                    PositionX REAL,
                    PositionY REAL,
                    AnnotationType TEXT, -- 'highlight', 'note', 'bookmark'
                    Content TEXT,
                    Color TEXT DEFAULT '#ffff00',
                    DateCreated TEXT DEFAULT CURRENT_TIMESTAMP,
                    DateModified TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (BookID) REFERENCES Books(BookID),
                    FOREIGN KEY (UserID) REFERENCES Users(UserID)
                )
            """)
            
            # Collections and Reading Lists
            Cursor.execute("""
                CREATE TABLE IF NOT EXISTS Collections (
                    CollectionID INTEGER PRIMARY KEY AUTOINCREMENT,
                    Name TEXT NOT NULL,
                    Description TEXT,
                    UserID INTEGER NOT NULL,
                    IsPublic BOOLEAN DEFAULT 0,
                    DateCreated TEXT DEFAULT CURRENT_TIMESTAMP,
                    DateModified TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (UserID) REFERENCES Users(UserID)
                )
            """)
            
            Cursor.execute("""
                CREATE TABLE IF NOT EXISTS CollectionBooks (
                    CollectionID INTEGER,
                    BookID INTEGER,
                    OrderIndex INTEGER DEFAULT 0,
                    DateAdded TEXT DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY (CollectionID, BookID),
                    FOREIGN KEY (CollectionID) REFERENCES Collections(CollectionID),
                    FOREIGN KEY (BookID) REFERENCES Books(BookID)
                )
            """)
            
            # Analytics and Usage Tracking
            Cursor.execute("""
                CREATE TABLE IF NOT EXISTS BookAnalytics (
                    AnalyticsID INTEGER PRIMARY KEY AUTOINCREMENT,
                    BookID INTEGER NOT NULL,
                    UserID INTEGER,
                    Action TEXT NOT NULL, -- 'view', 'download', 'search', 'rate'
                    Details TEXT, -- JSON for additional data
                    Timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
                    SessionID TEXT,
                    FOREIGN KEY (BookID) REFERENCES Books(BookID),
                    FOREIGN KEY (UserID) REFERENCES Users(UserID)
                )
            """)
            
            # System Configuration
            Cursor.execute("""
                CREATE TABLE IF NOT EXISTS SystemConfig (
                    ConfigKey TEXT PRIMARY KEY,
                    ConfigValue TEXT,
                    Description TEXT,
                    LastModified TEXT DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Insert initial system configuration
            InitialConfig = [
                ('version', '2.0.0', 'Database schema version'),
                ('created', self.TimestampStr, 'Database creation timestamp'),
                ('ai_enabled', 'true', 'AI features enabled'),
                ('search_engine', 'fts5', 'Full-text search engine'),
                ('backup_interval', '3600', 'Backup interval in seconds')
            ]
            
            Cursor.executemany(
                "INSERT OR REPLACE INTO SystemConfig (ConfigKey, ConfigValue, Description) VALUES (?, ?, ?)",
                InitialConfig
            )
            
            # Create indexes for performance
            Indexes = [
                "CREATE INDEX IF NOT EXISTS idx_books_author ON Books(Author)",
                "CREATE INDEX IF NOT EXISTS idx_books_title ON Books(Title)",
                "CREATE INDEX IF NOT EXISTS idx_books_date_added ON Books(DateAdded)",
                "CREATE INDEX IF NOT EXISTS idx_books_quality ON Books(QualityScore)",
                "CREATE INDEX IF NOT EXISTS idx_relationships_books ON BookRelationships(BookID1, BookID2)",
                "CREATE INDEX IF NOT EXISTS idx_annotations_book_user ON Annotations(BookID, UserID)",
                "CREATE INDEX IF NOT EXISTS idx_analytics_book ON BookAnalytics(BookID)",
                "CREATE INDEX IF NOT EXISTS idx_analytics_timestamp ON BookAnalytics(Timestamp)"
            ]
            
            for IndexSQL in Indexes:
                Cursor.execute(IndexSQL)
            
            Connection.commit()
            Connection.close()
            
            print(f"   ‚úÖ Created Digital Alexandria Database v2.0")
            print(f"   üìä Location: {DatabasePath}")
            self.LogMessages.append(f"‚úÖ Created: Digital Alexandria Database v2.0")
            return True
            
        except Exception as Error:
            print(f"   ‚ùå Error creating database: {Error}")
            return False

    def CreateCoreFoundationFiles(self) -> bool:
        """Create core foundation Python modules"""
        try:
            print("üèóÔ∏è Creating Core Foundation Files...")
            
            # Main Application Entry Point
            MainApp = f'''#!/usr/bin/env python3
"""
File: DigitalAlexandria.py
Path: BowersWorld-com/DigitalAlexandria.py
Standard: AIDEV-PascalCase-1.7
Created: {self.TimestampStr}
Modified: {self.TimestampStr}
Author: Herb Bowers - Project Himalaya
Contact: HimalayaProject1@gmail.com
Description: Digital Alexandria - Complete Library System Main Application

Purpose: Main entry point for Digital Alexandria library system. Provides unified
access to all system components including web interface, API, desktop integration,
and administrative functions following the Digital Alexandria blueprint architecture.

Usage: python DigitalAlexandria.py [command] [options]
Commands: web, api, desktop, admin, migrate, setup
"""

import sys
import argparse
from pathlib import Path

# Add source directory to Python path
sys.path.insert(0, str(Path(__file__).parent / "Source"))

from Core.Application import AlexandriaApplication
from Core.Configuration import ConfigurationManager
from Core.Logger import AlexandriaLogger

def CreateArgumentParser():
    """Create command line argument parser"""
    Parser = argparse.ArgumentParser(
        prog='Digital Alexandria',
        description='Complete Digital Library System',
        epilog='For more information, visit the Documentation folder'
    )
    
    Subparsers = Parser.add_subparsers(dest='command', help='Available commands')
    
    # Web Interface Command
    WebParser = Subparsers.add_parser('web', help='Start web interface')
    WebParser.add_argument('--host', default='localhost', help='Host address')
    WebParser.add_argument('--port', type=int, default=8000, help='Port number')
    WebParser.add_argument('--dev', action='store_true', help='Development mode')
    
    # API Server Command  
    APIParser = Subparsers.add_parser('api', help='Start API server')
    APIParser.add_argument('--port', type=int, default=8001, help='API port')
    APIParser.add_argument('--docs', action='store_true', help='Enable API docs')
    
    # Desktop Integration Command
    DesktopParser = Subparsers.add_parser('desktop', help='Launch desktop interface')
    DesktopParser.add_argument('--legacy', action='store_true', help='Use Andy.py legacy mode')
    
    # Admin Commands
    AdminParser = Subparsers.add_parser('admin', help='Administrative functions')
    AdminParser.add_argument('--backup', action='store_true', help='Create backup')
    AdminParser.add_argument('--optimize', action='store_true', help='Optimize database')
    AdminParser.add_argument('--stats', action='store_true', help='Show statistics')
    
    # Migration Command
    MigrateParser = Subparsers.add_parser('migrate', help='Data migration utilities')
    MigrateParser.add_argument('--from-legacy', action='store_true', help='Migrate from Andy.py')
    MigrateParser.add_argument('--backup-first', action='store_true', help='Create backup before migration')
    
    # Setup Command
    SetupParser = Subparsers.add_parser('setup', help='Initial system setup')
    SetupParser.add_argument('--reset', action='store_true', help='Reset all data')
    SetupParser.add_argument('--sample-data', action='store_true', help='Load sample data')
    
    return Parser

def Main():
    """Main application entry point"""
    try:
        # Parse command line arguments
        Parser = CreateArgumentParser()
        Arguments = Parser.parse_args()
        
        # Initialize configuration and logging
        Config = ConfigurationManager()
        Logger = AlexandriaLogger(Config)
        
        # Create main application
        App = AlexandriaApplication(Config, Logger)
        
        # Route to appropriate command
        if Arguments.command == 'web':
            App.StartWebInterface(
                Host=Arguments.host,
                Port=Arguments.port, 
                Development=Arguments.dev
            )
        elif Arguments.command == 'api':
            App.StartAPIServer(
                Port=Arguments.port,
                EnableDocs=Arguments.docs
            )
        elif Arguments.command == 'desktop':
            App.StartDesktopInterface(Legacy=Arguments.legacy)
        elif Arguments.command == 'admin':
            App.RunAdminCommand(Arguments)
        elif Arguments.command == 'migrate':
            App.RunMigration(Arguments)
        elif Arguments.command == 'setup':
            App.RunSetup(Arguments)
        else:
            # No command specified - show help and start web interface
            Parser.print_help()
            print("\\nüèõÔ∏è Starting Digital Alexandria Web Interface...")
            App.StartWebInterface()
            
    except KeyboardInterrupt:
        print("\\n‚ö†Ô∏è Digital Alexandria shutdown requested")
        sys.exit(0)
    except Exception as Error:
        print(f"\\n‚ùå Fatal error: {{Error}}")
        sys.exit(1)

if __name__ == "__main__":
    Main()
'''
            
            # Core Application Class
            CoreApp = f'''#!/usr/bin/env python3
"""
File: Application.py
Path: BowersWorld-com/Source/Core/Application.py
Standard: AIDEV-PascalCase-1.7
Created: {self.TimestampStr}
Modified: {self.TimestampStr}
Author: Herb Bowers - Project Himalaya
Contact: HimalayaProject1@gmail.com
Description: Digital Alexandria Core Application Manager

Purpose: Central application orchestration for Digital Alexandria. Manages all
system components, coordinates between web/desktop/API interfaces, and provides
unified application lifecycle management following layered architecture patterns.
"""

import sys
import asyncio
from pathlib import Path
from typing import Optional, Dict, Any

from .Configuration import ConfigurationManager
from .Logger import AlexandriaLogger
from .Database import DatabaseManager
from ..AI.AIEngine import AIEngineManager
from ..Interface.Web.WebApplication import WebApplication
from ..Interface.Desktop.DesktopLauncher import DesktopLauncher

class AlexandriaApplication:
    """
    Digital Alexandria Main Application Orchestrator
    
    Coordinates all system components and provides unified interface
    for web, desktop, and API access modes.
    """
    
    def __init__(self, Config: ConfigurationManager, Logger: AlexandriaLogger):
        """Initialize Digital Alexandria application"""
        self.Config = Config
        self.Logger = Logger
        self.Database = DatabaseManager(Config, Logger)
        self.AIEngine = AIEngineManager(Config, Logger) 
        self.IsRunning = False
        
        self.Logger.Info("Digital Alexandria Application initialized")
    
    async def StartWebInterface(self, Host: str = "localhost", Port: int = 8000, Development: bool = False):
        """Start the web interface server"""
        try:
            self.Logger.Info(f"Starting web interface on {{Host}}:{{Port}}")
            
            WebApp = WebApplication(self.Config, self.Logger, self.Database, self.AIEngine)
            await WebApp.Start(Host, Port, Development)
            
            self.IsRunning = True
            self.Logger.Info("Web interface started successfully")
            
        except Exception as Error:
            self.Logger.Error(f"Failed to start web interface: {{Error}}")
            raise
    
    async def StartAPIServer(self, Port: int = 8001, EnableDocs: bool = True):
        """Start the API server"""
        try:
            self.Logger.Info(f"Starting API server on port {{Port}}")
            
            # API server implementation
            from ..Interface.API.APIApplication import APIApplication
            APIApp = APIApplication(self.Config, self.Logger, self.Database, self.AIEngine)
            await APIApp.Start(Port, EnableDocs)
            
            self.Logger.Info("API server started successfully")
            
        except Exception as Error:
            self.Logger.Error(f"Failed to start API server: {{Error}}")
            raise
    
    def StartDesktopInterface(self, Legacy: bool = False):
        """Start the desktop interface"""
        try:
            self.Logger.Info(f"Starting desktop interface (Legacy: {{Legacy}})")
            
            if Legacy:
                # Launch Andy.py compatibility mode
                from ...Legacy.Andy.AndyLauncher import LaunchAndyCompatibilityMode
                LaunchAndyCompatibilityMode(self.Config, self.Database)
            else:
                # Modern desktop interface
                DesktopApp = DesktopLauncher(self.Config, self.Logger, self.Database, self.AIEngine)
                DesktopApp.Launch()
                
            self.Logger.Info("Desktop interface started successfully")
            
        except Exception as Error:
            self.Logger.Error(f"Failed to start desktop interface: {{Error}}")
            raise
    
    def RunAdminCommand(self, Arguments):
        """Execute administrative commands"""
        try:
            if Arguments.backup:
                self.Database.CreateBackup()
                print("‚úÖ Backup completed")
                
            if Arguments.optimize:
                self.Database.OptimizePerformance()
                print("‚úÖ Database optimized")
                
            if Arguments.stats:
                Stats = self.Database.GetStatistics()
                print("üìä Digital Alexandria Statistics:")
                for Key, Value in Stats.items():
                    print(f"   {{Key}}: {{Value}}")
                    
        except Exception as Error:
            self.Logger.Error(f"Admin command failed: {{Error}}")
            raise
    
    def RunMigration(self, Arguments):
        """Execute data migration operations"""
        try:
            if Arguments.from_legacy:
                if Arguments.backup_first:
                    self.Database.CreateBackup()
                    
                from ...Legacy.Migration.LegacyMigrator import LegacyMigrator
                Migrator = LegacyMigrator(self.Config, self.Logger, self.Database)
                Migrator.MigrateFromAndyPy()
                print("‚úÖ Legacy migration completed")
                
        except Exception as Error:
            self.Logger.Error(f"Migration failed: {{Error}}")
            raise
    
    def RunSetup(self, Arguments):
        """Execute initial setup operations"""
        try:
            if Arguments.reset:
                print("‚ö†Ô∏è Resetting all data...")
                self.Database.ResetDatabase()
                
            if Arguments.sample_data:
                print("üìö Loading sample data...")
                self.Database.LoadSampleData()
                
            print("‚úÖ Setup completed")
            
        except Exception as Error:
            self.Logger.Error(f"Setup failed: {{Error}}")
            raise
    
    def Shutdown(self):
        """Graceful application shutdown"""
        try:
            self.Logger.Info("Shutting down Digital Alexandria...")
            self.IsRunning = False
            
            # Close database connections
            self.Database.Close()
            
            # Cleanup AI engine
            self.AIEngine.Cleanup()
            
            self.Logger.Info("Digital Alexandria shutdown complete")
            
        except Exception as Error:
            self.Logger.Error(f"Error during shutdown: {{Error}}")
'''
            
            # Write foundation files
            FoundationFiles = [
                ("DigitalAlexandria.py", MainApp),
                ("Source/Core/Application.py", CoreApp),
                ("Source/Core/__init__.py", "# Digital Alexandria Core Foundation"),
                ("Source/AI/__init__.py", "# Digital Alexandria AI Engine"),
                ("Source/Interface/__init__.py", "# Digital Alexandria Interface Layer"),
                ("Source/Plugins/__init__.py", "# Digital Alexandria Plugin System")
            ]
            
            for FileName, Content in FoundationFiles:
                FilePath = self.ProjectPath / FileName
                FilePath.parent.mkdir(parents=True, exist_ok=True)
                
                with open(FilePath, 'w', encoding='utf-8') as File:
                    File.write(Content)
                    
                self.LogMessages.append(f"‚úÖ Created: {FileName}")
            
            print(f"   ‚úÖ Created {len(FoundationFiles)} foundation files")
            return True
            
        except Exception as Error:
            print(f"   ‚ùå Error creating foundation files: {Error}")
            return False

    def CreateDocumentation(self) -> bool:
        """Create comprehensive project documentation"""
        try:
            print("üìö Creating Digital Alexandria Documentation...")
            
            # Main README with Digital Alexandria vision
            ReadmeContent = f'''# BowersWorld-com - Complete Library System
## Digital Alexandria Architecture - Herb's Legacy Project

**Created:** {self.TimestampStr}  
**Standard:** AIDEV-PascalCase-1.7  
**Author:** Herb Bowers - Project Himalaya  

---

## üèõÔ∏è The Grand Vision

> *"A library is not a luxury but one of the necessities of life."* - Henry Ward Beecher

BowersWorld-com implements the Digital Alexandria architecture - more than software, it's a **living repository of human knowledge** with every possible tool for discovery, analysis, and preservation built in from the ground up.

## üéØ Core Principles

### 1. Future-Proof Foundation
- **Modular Architecture**: Every component can be upgraded independently
- **Open Standards**: JSON, SQLite, REST APIs - never locked into proprietary formats
- **Extensible Design**: Hooks and interfaces everywhere for future features
- **Documentation**: Every decision explained for future maintainers

### 2. Knowledge Preservation  
- **Full-Text Indexing**: Every word searchable
- **Metadata Preservation**: Original + enhanced + user annotations
- **Version Control**: Track every change to every book record
- **Backup Strategy**: Multiple redundant storage options

### 3. Intelligence Everywhere
- **AI-Powered Discovery**: "Find books like this but more advanced"
- **Relationship Mapping**: Visual networks of related knowledge
- **Automatic Curation**: AI suggests collections and reading paths
- **Content Analysis**: Detect plagiarism, find citations, map influences

## üèóÔ∏è System Architecture

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                 USER INTERFACES                         ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Web App ‚îÇ Desktop App ‚îÇ API ‚îÇ Mobile ‚îÇ Future Interfaces ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ                   AI LAYER                              ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Classification ‚îÇ Discovery ‚îÇ Analysis ‚îÇ Recommendations ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ                 KNOWLEDGE ENGINE                        ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Full-Text Search ‚îÇ Semantic Search ‚îÇ Graph Database    ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ                   DATA LAYER                            ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ   Books   ‚îÇ Metadata ‚îÇ Annotations ‚îÇ Analytics ‚îÇ Logs  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## üöÄ Quick Start

### Prerequisites
- Python 3.9 or higher
- 4GB RAM minimum (8GB recommended)
- 10GB free disk space

### Installation
```bash
# Clean start setup
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate

# Run foundation builder
python BowersWorldSetup.py

# Enter created project
cd BowersWorld-com

# Install dependencies
pip install -r requirements.txt

# Initialize system
python DigitalAlexandria.py setup --sample-data

# Start web interface
python DigitalAlexandria.py web
```

### Access Points
- **Web Interface**: http://localhost:8000
- **API Documentation**: http://localhost:8001/docs
- **Desktop Mode**: `python DigitalAlexandria.py desktop`

## üìñ Features

### Core Library Functions
- ‚úÖ **Intelligent Classification** (Multi-category, confidence scoring)
- ‚úÖ **Advanced Similarity** (Semantic, structural, conceptual)
- ‚úÖ **Duplicate Detection** (Sophisticated version/edition handling)
- ‚úÖ **Title Intelligence** (OCR, metadata fusion, confidence scoring)

### Discovery & Navigation
- üîç **Full-Text Search** (Every word in every book)
- üß† **Semantic Search** (Concept-based, not just keywords)
- üó∫Ô∏è **Knowledge Maps** (Visual relationship networks)
- üìä **Topic Clustering** (Auto-generated subject areas)
- üéØ **Smart Recommendations** (ML-powered suggestions)
- üìà **Reading Paths** (Guided learning sequences)

### AI-Powered Intelligence
- üìö **Multi-Modal Analysis** (Text, structure, metadata)
- üîó **Knowledge Graph Construction** (Relationship mapping)
- üéØ **Advanced Search** ("Books about X that don't require Y")
- üè∑Ô∏è **Auto-Classification** (Subject, difficulty, audience)
- üìä **Content Analysis** (Reading level, complexity, quality)

## üõ†Ô∏è Development

### Project Structure
```
BowersWorld-com/
‚îú‚îÄ‚îÄ Source/                    # Main source code
‚îÇ   ‚îú‚îÄ‚îÄ Core/                 # Foundation layer
‚îÇ   ‚îú‚îÄ‚îÄ AI/                   # Intelligence engine
‚îÇ   ‚îú‚îÄ‚îÄ Interface/            # User interfaces
‚îÇ   ‚îú‚îÄ‚îÄ Collaboration/        # Multi-user features
‚îÇ   ‚îî‚îÄ‚îÄ Plugins/             # Extension system
‚îú‚îÄ‚îÄ Data/                     # Database and files
‚îú‚îÄ‚îÄ Config/                   # Configuration files
‚îú‚îÄ‚îÄ Documentation/            # Comprehensive docs
‚îú‚îÄ‚îÄ Tests/                    # Test suites
‚îú‚îÄ‚îÄ Scripts/                  # Utility scripts
‚îî‚îÄ‚îÄ Legacy/                   # Andy.py integration
```

### Development Commands
```bash
# Start development server
python DigitalAlexandria.py web --dev

# Run tests
pytest Tests/

# Database operations
python DigitalAlexandria.py admin --backup
python DigitalAlexandria.py admin --optimize

# Migration from legacy
python DigitalAlexandria.py migrate --from-legacy --backup-first
```

## üìä Success Metrics

### Technical Excellence
- ‚ö° Sub-second search across entire collection
- üéØ 95%+ classification accuracy
- üîç Semantic search that "understands" queries
- üìä 99.9% uptime and data integrity

### User Experience
- üòä Intuitive for 8-year-olds, powerful for PhD researchers
- üì± Works perfectly on any device
- ‚ôø Fully accessible (WCAG 2.1 AA compliant)
- üåç Internationalization ready

## üîß Configuration

### Environment Variables
- `ALEXANDRIA_ENV`: development|production|testing
- `ALEXANDRIA_DB_PATH`: Database file location
- `ALEXANDRIA_AI_CACHE`: AI model cache directory
- `ALEXANDRIA_LOG_LEVEL`: DEBUG|INFO|WARNING|ERROR

### Configuration Files
- `alexandria_config.json`: Main configuration
- `Config/Development/config.json`: Development settings
- `Config/Production/config.json`: Production settings

## ü§ù Contributing

1. Follow AIDEV-PascalCase-1.7 standards
2. All functions must have docstrings and type hints
3. Tests required for new features
4. Update documentation for changes

## üìÑ License

This project embodies 50+ years of development wisdom and is designed to preserve human knowledge for future generations. 

## üèÜ The Alexandria Principle

> *"Build not just for today's users, but for the scholars of 2050 who will discover knowledge we can't yet imagine."*

Every decision guided by:
- **Permanence**: Will this work in 20 years?
- **Extensibility**: Can future maintainers build on this?
- **Excellence**: Is this worthy of the world's knowledge?
- **Legacy**: Would the scholars of Alexandria be proud?

---

**This isn't just Herb's library - it's humanity's library, one scroll at a time.** üèõÔ∏è
'''
            
            # Development Guide
            DevGuideContent = f'''# BowersWorld-com Development Guide
## Digital Alexandria Architecture - AIDEV-PascalCase-1.7 Standards Implementation

**Created:** {self.TimestampStr}  
**Standard:** AIDEV-PascalCase-1.7  
**Author:** Herb Bowers - Project Himalaya  

---

## üéØ Development Philosophy

> *"My code, my way‚Äîclarity, maintainability, and personality matter."*

Every line of code follows the AIDEV-PascalCase-1.7 standard, ensuring consistency, readability, and long-term maintainability.

## üìã File Header Template

```python
#!/usr/bin/env python3
"""
File: FileName.py
Path: BowersWorld-com/Path/To/FileName.py
Standard: AIDEV-PascalCase-1.7
Created: YYYY-MM-DD  HH:MM
Modified: YYYY-MM-DD  HH:MM
Author: Herb Bowers - Project Himalaya
Contact: HimalayaProject1@gmail.com
Description: Brief description of file purpose

Purpose: Detailed explanation of what this file does and how it fits
into the Digital Alexandria architecture.

Dependencies: List of major dependencies
Usage: How to use this module
"""
```

## üèóÔ∏è Architecture Patterns

### Layered Architecture
```
User Interface Layer ‚Üí Business Logic Layer ‚Üí Data Access Layer
```

### Dependency Injection
```python
class ComponentClass:
    def __init__(self, Config: ConfigurationManager, Logger: AlexandriaLogger):
        self.Config = Config
        self.Logger = Logger
```

### Plugin Architecture
```python
class PluginInterface:
    def Initialize(self, Context: PluginContext) -> bool:
        pass
    
    def Execute(self, Parameters: Dict[str, Any]) -> PluginResult:
        pass
    
    def Cleanup(self) -> None:
        pass
```

## üîß Coding Standards

### Naming Conventions
- **Files & Modules**: PascalCase.py
- **Classes**: PascalCase
- **Functions & Methods**: PascalCase  
- **Variables**: PascalCase
- **Constants**: ALLCAPSWITHUNDERSCORES
- **Private**: _PrefixWithUnderscore

### Type Hints
```python
def ProcessBook(BookPath: str, Options: Dict[str, Any]) -> BookProcessingResult:
    """Process a book file with specified options"""
    pass
```

### Error Handling
```python
try:
    Result = ProcessSomething()
    return Result
except SpecificException as Error:
    self.Logger.Error(f"Specific error occurred: {{Error}}")
    raise
except Exception as Error:
    self.Logger.Error(f"Unexpected error: {{Error}}")
    raise
```

## üìä Testing Standards

### Unit Test Template
```python
#!/usr/bin/env python3
"""
File: TestSomething.py
Path: BowersWorld-com/Tests/Unit/TestSomething.py
Standard: AIDEV-PascalCase-1.7
Created: {self.TimestampStr}
Modified: {self.TimestampStr}
Author: Herb Bowers - Project Himalaya
Description: Unit tests for Something module
"""

import pytest
from unittest.mock import Mock, patch
from Source.Something import SomethingClass

class TestSomethingClass:
    def TestInitialization(self):
        # Test proper initialization
        pass
    
    def TestMainFunctionality(self):
        # Test core functionality
        pass
    
    def TestErrorHandling(self):
        # Test error conditions
        pass
```

## üìà Performance Guidelines

### Database Operations
- Use parameterized queries
- Implement connection pooling
- Add appropriate indexes
- Monitor query performance

### AI Processing
- Cache model results
- Batch process when possible
- Use GPU when available
- Implement fallback mechanisms

### Web Interface
- Implement lazy loading
- Use CDN for static assets
- Compress responses
- Cache API results

## üîå Plugin Development

### Plugin Structure
```
Plugins/
‚îî‚îÄ‚îÄ PluginName/
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îú‚îÄ‚îÄ PluginName.py
    ‚îú‚îÄ‚îÄ config.json
    ‚îú‚îÄ‚îÄ requirements.txt
    ‚îî‚îÄ‚îÄ README.md
```

### Plugin Template
```python
from Source.Plugins.PluginInterface import PluginInterface

class MyPlugin(PluginInterface):
    def __init__(self):
        self.Name = "MyPlugin"
        self.Version = "1.0.0"
        self.Description = "Plugin description"
    
    def Initialize(self, Context: PluginContext) -> bool:
        # Plugin initialization logic
        return True
    
    def Execute(self, Parameters: Dict[str, Any]) -> PluginResult:
        # Main plugin functionality
        pass
    
    def Cleanup(self) -> None:
        # Cleanup resources
        pass
```

## üöÄ Deployment

### Development Environment
```bash
export ALEXANDRIA_ENV=development
export ALEXANDRIA_DEBUG=true
export ALEXANDRIA_LOG_LEVEL=DEBUG
python DigitalAlexandria.py web --dev
```

### Production Environment
```bash
export ALEXANDRIA_ENV=production
export ALEXANDRIA_DEBUG=false
export ALEXANDRIA_LOG_LEVEL=INFO
python DigitalAlexandria.py web --port 80
```

## üìã Checklist

### Before Committing
- [ ] All files have proper AIDEV headers
- [ ] Code follows PascalCase conventions
- [ ] Functions have docstrings and type hints
- [ ] Tests written and passing
- [ ] Documentation updated
- [ ] No hardcoded values
- [ ] Error handling implemented
- [ ] Logging added where appropriate

### Before Release
- [ ] Performance testing completed
- [ ] Security review passed
- [ ] Documentation complete
- [ ] Migration scripts tested
- [ ] Backup procedures verified
- [ ] Monitoring configured

---

*Remember: Every line of code is a brick in the foundation of BowersWorld-com's Digital Alexandria architecture. Build with pride, precision, and permanence.* üèõÔ∏è
'''
            
            # Write documentation files
            DocumentationFiles = [
                ("README.md", ReadmeContent),
                ("Documentation/DevelopmentGuide.md", DevGuideContent),
                ("Documentation/STANDARDS.md", "# AIDEV-PascalCase-1.7 Standards Reference\\n\\nSee DevelopmentGuide.md for complete standards documentation."),
                ("Documentation/API/README.md", "# Digital Alexandria API Documentation\\n\\nAPI documentation will be auto-generated."),
                ("Documentation/Architecture/SystemDesign.md", "# Digital Alexandria System Architecture\\n\\nDetailed architecture documentation."),
                (".gitignore", self.CreateGitIgnore()),
                ("CHANGELOG.md", f"# BowersWorld-com Changelog\\n\\n## Version 1.0.0 - {self.TimestampStr}\\n- Digital Alexandria architecture foundation created\\n- Complete BowersWorld-com structure implemented\\n- AIDEV-PascalCase-1.7 standards applied")
            ]
            
            for FileName, Content in DocumentationFiles:
                FilePath = self.ProjectPath / FileName
                FilePath.parent.mkdir(parents=True, exist_ok=True)
                
                with open(FilePath, 'w', encoding='utf-8') as File:
                    File.write(Content)
                    
                self.LogMessages.append(f"‚úÖ Created: {FileName}")
            
            print(f"   ‚úÖ Created {len(DocumentationFiles)} documentation files")
            return True
            
        except Exception as Error:
            print(f"   ‚ùå Error creating documentation: {Error}")
            return False

    def CreateGitIgnore(self) -> str:
        """Generate appropriate .gitignore file"""
        return '''# BowersWorld-com - .gitignore
# Generated by BowersWorld-com Setup (Digital Alexandria Architecture)

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environments
venv/
env/
ENV/
.venv/
.env/

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# BowersWorld-com Specific (Digital Alexandria Architecture)
Data/Database/*.db
Data/Database/*.db-*
Data/Cache/
Data/Backups/
Logs/
*.log

# Sensitive Configuration
Config/Production/secrets.json
Config/Production/api_keys.json
.env
.env.local
.env.production

# AI Models (large files)
Source/AI/Models/*.bin
Source/AI/Models/*.pt
Source/AI/Models/*.h5
Source/AI/Training/

# Temporary Files
tmp/
temp/
*.tmp
*.temp

# OS Generated
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Coverage Reports
htmlcov/
.coverage
.coverage.*
coverage.xml
*.cover

# Testing
.pytest_cache/
.tox/
'''

    def GenerateSetupReport(self) -> bool:
        """Generate comprehensive setup report"""
        try:
            print("üìÑ Generating Setup Report...")
            
            ReportPath = self.ProjectPath / f"Setup_Report_{self.Timestamp.strftime('%Y%m%d_%H%M%S')}.txt"
            
            ReportContent = f"""
BowersWorld-com - Complete Project Setup Report
(Digital Alexandria Architecture Implementation)
Generated: {self.TimestampStr}
Standard: AIDEV-PascalCase-1.7
Author: Herb Bowers - Project Himalaya

================================================================
SETUP SUMMARY
================================================================

Project Location: {self.ProjectPath}
Setup Completed: {self.TimestampStr}
Total Operations: {len(self.LogMessages)}

Architecture: Digital Alexandria Blueprint Implementation
- Layered Architecture Pattern
- Plugin-Based Extension System  
- AI-Powered Intelligence Layer
- Multi-Interface Support (Web/Desktop/Mobile/API)
- Full AIDEV-PascalCase-1.7 Standards Compliance

================================================================
OPERATIONS COMPLETED
================================================================

{chr(10).join(self.LogMessages)}

================================================================
NEXT STEPS
================================================================

1. ENTER PROJECT DIRECTORY
   cd BowersWorld-com

2. INSTALL DEPENDENCIES
   pip install -r requirements.txt

3. INITIALIZE SYSTEM
   python DigitalAlexandria.py setup --sample-data

4. START WEB INTERFACE
   python DigitalAlexandria.py web --dev
   Access: http://localhost:8000

5. START API SERVER
   python DigitalAlexandria.py api --docs
   Access: http://localhost:8001/docs

6. LEGACY MIGRATION (if needed)
   python DigitalAlexandria.py migrate --from-legacy --backup-first

7. DEVELOPMENT WORKFLOW
   - Follow AIDEV-PascalCase-1.7 standards
   - Run tests: pytest Tests/
   - Generate docs: Update Documentation/
   - Plugin development: See Documentation/DevelopmentGuide.md

8. GITHUB REPOSITORY
   - Initialize: git init
   - Add remote: git remote add origin [your-repo-url]
   - Initial commit: git add . && git commit -m "Initial Digital Alexandria foundation"
   - Push: git push -u origin main

================================================================
PROJECT STRUCTURE CREATED - CLEAN START
================================================================

Current Directory/
‚îú‚îÄ‚îÄ venv/                      # Virtual environment
‚îú‚îÄ‚îÄ BowersWorldSetup.py        # Setup script (can be removed after setup)
‚îî‚îÄ‚îÄ BowersWorld-com/           # Complete Digital Alexandria project
    ‚îú‚îÄ‚îÄ Source/                # Main source code (Layered Architecture)
‚îÇ   ‚îú‚îÄ‚îÄ Core/                 # Foundation Layer
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Application.py    # Main application orchestrator
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Configuration.py  # Configuration management
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Database.py       # Database abstraction layer
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Logger.py         # Logging system
‚îÇ   ‚îú‚îÄ‚îÄ AI/                   # Intelligence Layer
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AIEngine.py       # AI orchestration
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Classification/   # Book classification
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Discovery/        # Knowledge discovery
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Analytics/        # Content analysis
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Models/           # AI model storage
‚îÇ   ‚îú‚îÄ‚îÄ Interface/            # User Interface Layer
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Web/             # Modern web interface
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Desktop/         # Desktop application
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Mobile/          # Mobile interface
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ API/             # RESTful API
‚îÇ   ‚îú‚îÄ‚îÄ Collaboration/        # Multi-User Features
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Users/           # User management
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Annotations/     # Note/highlight system
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Collections/     # Shared collections
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Social/          # Social features
‚îÇ   ‚îî‚îÄ‚îÄ Plugins/             # Extension System
‚îÇ       ‚îú‚îÄ‚îÄ Classification/   # Classification plugins
‚îÇ       ‚îú‚îÄ‚îÄ Search/          # Search plugins
‚îÇ       ‚îú‚îÄ‚îÄ Analysis/        # Analysis plugins
‚îÇ       ‚îî‚îÄ‚îÄ Export/          # Export plugins
‚îú‚îÄ‚îÄ Data/                     # Data Storage
‚îÇ   ‚îú‚îÄ‚îÄ Database/            # SQLite databases
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Alexandria.db    # Main database (v2.0 schema)
‚îÇ   ‚îú‚îÄ‚îÄ Books/               # PDF library files
‚îÇ   ‚îú‚îÄ‚îÄ Covers/              # Book cover images
‚îÇ   ‚îú‚îÄ‚îÄ Thumbnails/          # Web-optimized thumbnails
‚îÇ   ‚îú‚îÄ‚îÄ Cache/               # Temporary cache
‚îÇ   ‚îî‚îÄ‚îÄ Backups/             # Database backups
‚îú‚îÄ‚îÄ Config/                   # Configuration Management
‚îÇ   ‚îú‚îÄ‚îÄ Development/         # Development settings
‚îÇ   ‚îú‚îÄ‚îÄ Production/          # Production settings
‚îÇ   ‚îú‚îÄ‚îÄ Testing/             # Test settings
‚îÇ   ‚îî‚îÄ‚îÄ Deployment/          # Deployment configs
‚îú‚îÄ‚îÄ Documentation/            # Comprehensive Documentation
‚îÇ   ‚îú‚îÄ‚îÄ API/                 # API documentation
‚îÇ   ‚îú‚îÄ‚îÄ Architecture/        # System architecture docs
‚îÇ   ‚îú‚îÄ‚îÄ Standards/           # AIDEV-PascalCase-1.7 standards
‚îÇ   ‚îú‚îÄ‚îÄ Guides/              # User/developer guides
‚îÇ   ‚îî‚îÄ‚îÄ Research/            # Research notes
‚îú‚îÄ‚îÄ Tests/                    # Testing Infrastructure
‚îÇ   ‚îú‚îÄ‚îÄ Unit/                # Unit tests
‚îÇ   ‚îú‚îÄ‚îÄ Integration/         # Integration tests
‚îÇ   ‚îú‚îÄ‚îÄ Performance/         # Performance tests
‚îÇ   ‚îî‚îÄ‚îÄ Data/                # Test data
‚îú‚îÄ‚îÄ Scripts/                  # Utility Scripts
‚îÇ   ‚îú‚îÄ‚îÄ Migration/           # Data migration scripts
‚îÇ   ‚îú‚îÄ‚îÄ Development/         # Development utilities
‚îÇ   ‚îú‚îÄ‚îÄ Deployment/          # Deployment scripts
‚îÇ   ‚îî‚îÄ‚îÄ Maintenance/         # Maintenance scripts
‚îú‚îÄ‚îÄ Legacy/                   # Legacy Integration
‚îÇ   ‚îú‚îÄ‚îÄ Andy/                # Andy.py desktop app integration
‚îÇ   ‚îú‚îÄ‚îÄ Migration/           # Legacy migration tools
‚îÇ   ‚îî‚îÄ‚îÄ Archive/             # Archived legacy code
‚îú‚îÄ‚îÄ alexandria_config.json    # Main configuration
‚îú‚îÄ‚îÄ requirements.txt          # Python dependencies
‚îú‚îÄ‚îÄ DigitalAlexandria.py     # Main application entry point
‚îî‚îÄ‚îÄ README.md                # Project documentation

================================================================
DATABASE SCHEMA (v2.0)
================================================================

Core Tables:
- Books: Enhanced metadata with AI analysis fields
- BookRelationships: Knowledge graph connections
- BooksFullText: Full-text search virtual table
- Users: Multi-user support
- Annotations: User notes and highlights
- Collections: Shared reading lists
- BookAnalytics: Usage tracking
- SystemConfig: Configuration storage

Key Features:
- Full-text search with FTS5
- Knowledge graph relationships
- AI analysis result storage
- Multi-user collaboration
- Comprehensive analytics
- Version control support

================================================================
CONFIGURATION FILES
================================================================

alexandria_config.json: Main project configuration
Config/Development/config.json: Development environment
Config/Production/config.json: Production environment  
requirements.txt: Python dependencies

Key Settings:
- Database: SQLite with FTS5 full-text search
- AI Engine: Multi-model ensemble architecture
- Web Framework: FastAPI + React (future)
- Desktop Legacy: PySide6 (Andy.py integration)
- Plugin System: Hook-based extensions

================================================================
DIGITAL ALEXANDRIA FEATURES
================================================================

üèõÔ∏è FOUNDATION LAYER
- Future-proof modular architecture
- SQLite + FTS5 full-text search
- Comprehensive logging and monitoring
- Configuration management
- Multi-environment support

üß† AI INTELLIGENCE LAYER  
- Multi-model book classification
- Semantic similarity analysis
- Knowledge graph construction
- Content analysis and scoring
- Recommendation engine

üñ•Ô∏è INTERFACE LAYER
- Modern web interface (responsive)
- Legacy desktop integration (Andy.py)
- RESTful API with documentation
- Mobile-friendly design
- Plugin-extensible views

ü§ù COLLABORATION LAYER
- Multi-user support
- Annotation and note sharing
- Collaborative collections
- Social features
- Access control

üîå PLUGIN SYSTEM
- Classification plugins
- Search algorithm plugins
- Analysis tool plugins
- Export/import plugins
- Future-ready extension points

================================================================
SUCCESS METRICS
================================================================

Technical Excellence:
‚úÖ Sub-second search across entire collection
‚úÖ 95%+ classification accuracy target
‚úÖ Semantic search understanding
‚úÖ 99.9% uptime and data integrity

User Experience:
‚úÖ Intuitive for beginners, powerful for experts
‚úÖ Cross-device compatibility
‚úÖ Full accessibility (WCAG 2.1 AA)
‚úÖ Internationalization ready

Legacy Impact:
‚úÖ Architecture others can replicate
‚úÖ Educational value for developers
‚úÖ Research contributions to digital libraries
‚úÖ Model for knowledge preservation

================================================================
THE ALEXANDRIA PRINCIPLE
================================================================

"Build not just for today's users, but for the scholars of 2050 
who will discover knowledge we can't yet imagine."

Every decision guided by:
- Permanence: Will this work in 20 years?
- Extensibility: Can future maintainers build on this?
- Excellence: Is this worthy of the world's knowledge?
- Legacy: Would the scholars of Alexandria be proud?

================================================================
STATUS: BOWERSWORLD-COM FOUNDATION COMPLETE ‚úÖ
================================================================

The foundation is laid. The architecture is sound. The standards 
are enforced. BowersWorld-com with Digital Alexandria architecture 
is ready for a fresh GitHub push and development!

üîÑ Clean Start Complete:
- Old project safely moved/archived
- Fresh Digital Alexandria architecture implemented  
- GitHub repository ready for population
- AIDEV-PascalCase-1.7 standards throughout
- Legacy migration tools included for future reference

Ready to build the future of human knowledge preservation! üèõÔ∏è

"""
            
            with open(ReportPath, 'w', encoding='utf-8') as File:
                File.write(ReportContent)
            
            print(f"   ‚úÖ Setup report: {ReportPath}")
            return True
            
        except Exception as Error:
            print(f"   ‚ùå Error generating report: {Error}")
            return False

    def Execute(self) -> bool:
        """Execute complete BowersWorld-com setup with Digital Alexandria architecture"""
        print("üöÄ Starting BowersWorld-com Complete Setup (Digital Alexandria Architecture)...")
        print()
        
        SetupSteps = [
            ("Project Structure", self.CreateProjectStructure),
            ("Configuration Files", self.CreateConfigurationFiles), 
            ("Foundation Database", self.CreateFoundationDatabase),
            ("Core Foundation Files", self.CreateCoreFoundationFiles),
            ("Documentation", self.CreateDocumentation),
            ("Setup Report", self.GenerateSetupReport)
        ]
        
        SuccessCount = 0
        for StepName, StepFunction in SetupSteps:
            if StepFunction():
                SuccessCount += 1
            else:
                print(f"‚ö†Ô∏è {StepName} encountered issues but setup continues...")
        
        print()
        print("=" * 60)
        if SuccessCount == len(SetupSteps):
            print("üéâ BowersWorld-com Foundation Setup COMPLETE!")
            print("   (Digital Alexandria Architecture Implemented)")
            print()
            print("üèõÔ∏è BowersWorld-com is ready for development!")
            print()
            print("üìã Next Steps:")
            print("   1. cd BowersWorld-com")
            print("   2. pip install -r requirements.txt")  
            print("   3. python DigitalAlexandria.py setup --sample-data")
            print("   4. python DigitalAlexandria.py web --dev")
            print("   5. Access: http://localhost:8000")
            print()
            print("üêô GitHub Repository Setup:")
            print("   1. git init")
            print("   2. git remote add origin [your-repo-url]")
            print("   3. git add . && git commit -m 'Initial Digital Alexandria foundation'")
            print("   4. git push -u origin main")
            print()
            print("üìö Documentation: See Documentation/ folder")
            print("üîß Standards: Follow AIDEV-PascalCase-1.7")
            print("üéØ Vision: Digital Alexandria architecture!")
            print()
            print(f"‚úÖ Setup completed: {SuccessCount}/{len(SetupSteps)} operations successful")
            return True
        else:
            print(f"‚ö†Ô∏è Setup completed with warnings: {SuccessCount}/{len(SetupSteps)} operations successful")
            print("   Check individual step messages above for details")
            return False

def Main():
    """Main setup script entry point"""
    try:
        print("üèõÔ∏è BowersWorld-com Foundation Builder")
        print("   Digital Alexandria Architecture Implementation")
        print("   AIDEV-PascalCase-1.7 Standards")
        print("   Project Himalaya - Herb Bowers")
        print()
        
        # Setup location guidance
        CurrentDir = Path.cwd()
        print(f"üìÅ Current Directory: {CurrentDir}")
        print()
        print("üéØ CLEAN START SETUP:")
        print("   1. Create project directory: mkdir BowersWorld-com")
        print("   2. Enter directory: cd BowersWorld-com")
        print("   3. Create virtual environment: python -m venv venv")
        print("   4. Activate venv: source venv/bin/activate (or venv\\Scripts\\activate)")
        print("   5. Run setup: python BowersWorldSetup.py")
        print("   6. This creates complete BowersWorld-com/ structure")
        print("   7. GitHub repo ready for fresh push")
        print()
        
        # Check if we're in the right location
        if os.path.exists("BowersWorld-com"):
            print("‚ö†Ô∏è  BowersWorld-com directory already exists!")
            print("   This will REPLACE/REBUILD the entire project structure")
            print("   Old project has been moved - this is a clean foundation build")
            print()
            Response = input("   Continue with clean rebuild? (y/N): ").strip().lower()
            if Response != 'y':
                print("   Setup cancelled.")
                print()
                print("üöÄ For clean setup, remove existing BowersWorld-com first:")
                print("   rm -rf BowersWorld-com  # or move to backup location")
                print("   python BowersWorldSetup.py")
                return False
        else:
            print("‚úÖ Clean directory - perfect for fresh BowersWorld-com foundation!")
            print()
        
        # Create setup instance and execute
        Setup = BowersWorldSetup()
        return Setup.Execute()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Setup interrupted by user")
        return False
    except Exception as Error:
        print(f"\n‚ùå Setup failed: {Error}")
        return False

if __name__ == "__main__":
    Success = Main()
    sys.exit(0 if Success else 1)

================
File: CreateLibraryCSV/Complete Anderson's Library Collection Analysis.py
================
#!/usr/bin/env python3
"""
Complete Anderson's Library Collection Analysis and LC Enhancement Preparation
"""

import pandas as pd
import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns

def analyze_complete_collection():
    """Analyze the complete 1,219 PDF collection"""
    
    csv_path = "/home/herb/Desktop/BowersWorld-com/AndersonLibrary_PDFMetadata.csv"
    
    print("üìö Anderson's Library - Complete Collection Analysis")
    print("=" * 70)
    
    # Load the complete dataset
    try:
        df = pd.read_csv(csv_path)
        print(f"‚úÖ Loaded {len(df)} PDF records - COMPLETE COLLECTION!")
    except Exception as e:
        print(f"‚ùå Error loading CSV: {e}")
        return
    
    print()
    print("üéØ COLLECTION OVERVIEW:")
    print("-" * 50)
    print(f"üìö Total books: {len(df)}")
    
    # File statistics
    df['file_size_mb'] = pd.to_numeric(df['file_size_mb'], errors='coerce')
    df['page_count'] = pd.to_numeric(df['page_count'], errors='coerce')
    
    total_size_gb = df['file_size_mb'].sum() / 1024
    avg_size_mb = df['file_size_mb'].mean()
    total_pages = df['page_count'].sum()
    avg_pages = df['page_count'].mean()
    
    print(f"üíæ Total collection size: {total_size_gb:.1f} GB")
    print(f"üìÑ Average file size: {avg_size_mb:.1f} MB")
    print(f"üìñ Total pages: {total_pages:,} pages")
    print(f"üìñ Average pages per book: {avg_pages:.0f} pages")
    
    print()
    print("üìà METADATA EXTRACTION SUCCESS RATES:")
    print("-" * 50)
    
    # Calculate success rates for the complete collection
    pdf_titles = df['pdf_title'].notna() & (df['pdf_title'].str.strip() != '')
    pdf_authors = df['pdf_author'].notna() & (df['pdf_author'].str.strip() != '')
    extracted_isbns = df['extracted_isbn'].notna() & (df['extracted_isbn'].str.strip() != '')
    extracted_years = df['extracted_year'].notna()
    extracted_publishers = df['extracted_publisher'].notna() & (df['extracted_publisher'].str.strip() != '')
    
    total = len(df)
    print(f"üìñ PDF Titles: {pdf_titles.sum()}/{total} ({pdf_titles.sum()/total*100:.1f}%)")
    print(f"‚úçÔ∏è PDF Authors: {pdf_authors.sum()}/{total} ({pdf_authors.sum()/total*100:.1f}%)")
    print(f"üî¢ ISBNs: {extracted_isbns.sum()}/{total} ({extracted_isbns.sum()/total*100:.1f}%)")
    print(f"üìÖ Years: {extracted_years.sum()}/{total} ({extracted_years.sum()/total*100:.1f}%)")
    print(f"üè¢ Publishers: {extracted_publishers.sum()}/{total} ({extracted_publishers.sum()/total*100:.1f}%)")
    
    print()
    print("üìÖ PUBLICATION TIMELINE:")
    print("-" * 50)
    
    years = df['extracted_year'].dropna()
    # Filter to only numeric years (4-digit years between 1000-2100)
    numeric_years = pd.to_numeric(years, errors='coerce')
    valid_years = numeric_years[(numeric_years >= 1000) & (numeric_years <= 2100)]
    
    if len(valid_years) > 0:
        print(f"üìä Years extracted: {len(years)} books ({len(valid_years)} valid years)")
        print(f"üìÖ Earliest: {int(valid_years.min())}")
        print(f"üìÖ Latest: {int(valid_years.max())}")
        print(f"üìÖ Median year: {int(valid_years.median())}")
        
        # Decade breakdown
        print("\nüìà By decade:")
        decade_counts = ((valid_years // 10) * 10).value_counts().sort_index()
        for decade, count in decade_counts.tail(6).items():  # Last 6 decades
            print(f"  {int(decade)}s: {count} books")
    
    print()
    print("üéØ LIBRARY OF CONGRESS READINESS ASSESSMENT:")
    print("-" * 50)
    
    # Enhanced readiness assessment for complete collection
    # High confidence: Has title AND (author OR ISBN OR year)
    high_confidence = (
        pdf_titles & 
        (pdf_authors | extracted_isbns | extracted_years)
    )
    
    # Medium confidence: Has title OR (author AND year) OR ISBN
    medium_confidence = (
        ~high_confidence & 
        (pdf_titles | (pdf_authors & extracted_years) | extracted_isbns)
    )
    
    # Excellent confidence: Has title AND author AND (ISBN OR year)
    excellent_confidence = (
        pdf_titles & pdf_authors & (extracted_isbns | extracted_years)
    )
    
    low_confidence = ~(high_confidence | medium_confidence)
    
    print(f"üèÜ EXCELLENT (Title + Author + ISBN/Year): {excellent_confidence.sum()} books")
    print(f"üü¢ HIGH confidence: {high_confidence.sum()} books")
    print(f"üü° MEDIUM confidence: {medium_confidence.sum()} books")
    print(f"üî¥ LOW confidence: {low_confidence.sum()} books")
    
    print()
    print("üìä LC ENHANCEMENT STRATEGY:")
    print("-" * 50)
    
    # Calculate expected LC success rates
    isbn_books = extracted_isbns.sum()
    title_author_books = (pdf_titles & pdf_authors).sum()
    title_only_books = (pdf_titles & ~pdf_authors).sum()
    
    # Estimated LC success rates based on data quality
    estimated_isbn_success = isbn_books * 0.85  # 85% success for ISBN lookups
    estimated_title_author_success = title_author_books * 0.75  # 75% for title+author
    estimated_title_only_success = title_only_books * 0.50  # 50% for title only
    
    total_estimated_success = estimated_isbn_success + estimated_title_author_success + estimated_title_only_success
    
    print(f"üìö Books with ISBNs: {isbn_books} (expected 85% LC success)")
    print(f"üìö Books with Title+Author: {title_author_books} (expected 75% LC success)")
    print(f"üìö Books with Title only: {title_only_books} (expected 50% LC success)")
    print(f"üéØ ESTIMATED LC ENHANCEMENT: ~{total_estimated_success:.0f} books ({total_estimated_success/total*100:.1f}%)")
    
    print()
    print("üìñ SAMPLE HIGH-QUALITY RECORDS:")
    print("-" * 50)
    
    # Show best examples
    excellent_samples = df[excellent_confidence].head(5)
    for idx, row in excellent_samples.iterrows():
        print(f"\nüìö {row['filename']}")
        if pd.notna(row['pdf_title']) and row['pdf_title'].strip():
            print(f"   üìñ Title: {row['pdf_title']}")
        if pd.notna(row['pdf_author']) and row['pdf_author'].strip():
            print(f"   ‚úçÔ∏è Author: {row['pdf_author']}")
        if pd.notna(row['extracted_isbn']) and row['extracted_isbn'].strip():
            print(f"   üî¢ ISBN: {row['extracted_isbn']}")
        if pd.notna(row['extracted_year']):
            print(f"   üìÖ Year: {int(row['extracted_year'])}")
        if pd.notna(row['extracted_publisher']) and row['extracted_publisher'].strip():
            print(f"   üè¢ Publisher: {row['extracted_publisher']}")
    
    print()
    print("üöÄ NEXT PHASE PREPARATION:")
    print("-" * 50)
    print("1. ‚úÖ Complete PDF metadata extraction (DONE!)")
    print("2. üîÑ Library of Congress API integration")
    print("3. üîÑ Batch LC data enhancement")
    print("4. üîÑ Manual curation and verification")
    print("5. üîÑ Database schema enhancement")
    print("6. üîÑ Professional catalog integration")
    
    return df

def create_lc_enhancement_queue(df):
    """Create prioritized queue for LC enhancement"""
    
    output_path = "/home/herb/Desktop/BowersWorld-com/AndersonLibrary_LCEnhancementQueue.xlsx"
    
    print("\nüîß Creating LC Enhancement Queue...")
    print("-" * 50)
    
    # Clean and prepare data
    df_clean = df.copy()
    
    # Clean text fields
    text_columns = ['pdf_title', 'pdf_author', 'pdf_subject', 'pdf_creator', 'pdf_producer', 
                   'extracted_publisher', 'first_page_text', 'title_page_text', 'copyright_page_text']
    
    for col in text_columns:
        if col in df_clean.columns:
            df_clean[col] = df_clean[col].fillna('').astype(str)
            # Remove problematic characters for Excel
            df_clean[col] = df_clean[col].str.replace(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]', '', regex=True)
            # Limit length
            df_clean[col] = df_clean[col].str[:32767]
    
    # Create priority scoring
    df_clean['lc_priority_score'] = 0
    
    # Add points for data quality
    df_clean.loc[df_clean['pdf_title'].str.len() > 0, 'lc_priority_score'] += 10
    df_clean.loc[df_clean['pdf_author'].str.len() > 0, 'lc_priority_score'] += 10  
    df_clean.loc[df_clean['extracted_isbn'].notna() & (df_clean['extracted_isbn'].str.len() > 0), 'lc_priority_score'] += 20
    df_clean.loc[df_clean['extracted_year'].notna(), 'lc_priority_score'] += 5
    df_clean.loc[df_clean['extracted_publisher'].str.len() > 0, 'lc_priority_score'] += 5
    
    # Sort by priority (highest first)
    df_sorted = df_clean.sort_values('lc_priority_score', ascending=False)
    
    # Add LC enhancement columns
    df_sorted['lc_search_query'] = ''
    df_sorted['lc_api_status'] = 'pending'
    df_sorted['lc_match_found'] = ''
    df_sorted['lc_confidence'] = ''
    df_sorted['lc_title'] = ''
    df_sorted['lc_author'] = ''
    df_sorted['lc_subjects'] = ''
    df_sorted['lc_classification'] = ''
    df_sorted['lc_isbn'] = ''
    df_sorted['lc_publisher'] = ''
    df_sorted['lc_year'] = ''
    df_sorted['lc_description'] = ''
    df_sorted['manual_notes'] = ''
    df_sorted['verification_status'] = 'pending'
    
    # Select and reorder columns for LC workflow
    lc_columns = [
        'filename', 'lc_priority_score',
        'pdf_title', 'pdf_author', 'extracted_isbn', 'extracted_year', 'extracted_publisher',
        'lc_search_query', 'lc_api_status', 'lc_match_found', 'lc_confidence',
        'lc_title', 'lc_author', 'lc_subjects', 'lc_classification', 
        'lc_isbn', 'lc_publisher', 'lc_year', 'lc_description',
        'manual_notes', 'verification_status',
        'file_size_mb', 'page_count', 'extraction_method'
    ]
    
    # Keep only available columns
    available_columns = [col for col in lc_columns if col in df_sorted.columns]
    lc_queue = df_sorted[available_columns]
    
    # Save the enhancement queue
    try:
        lc_queue.to_excel(output_path, index=False, engine='openpyxl')
        print(f"‚úÖ LC Enhancement Queue saved: {output_path}")
        
        # Print priority breakdown
        high_priority = (lc_queue['lc_priority_score'] >= 30).sum()
        medium_priority = ((lc_queue['lc_priority_score'] >= 20) & (lc_queue['lc_priority_score'] < 30)).sum()
        low_priority = (lc_queue['lc_priority_score'] < 20).sum()
        
        print(f"\nüìä Priority Breakdown:")
        print(f"   üèÜ High Priority (30+ points): {high_priority} books")
        print(f"   üü° Medium Priority (20-29 points): {medium_priority} books")
        print(f"   ‚ö™ Low Priority (<20 points): {low_priority} books")
        
    except Exception as e:
        print(f"‚ùå Error saving Excel: {e}")
        # Fallback to CSV
        csv_path = output_path.replace('.xlsx', '.csv')
        lc_queue.to_csv(csv_path, index=False)
        print(f"‚úÖ Saved as CSV instead: {csv_path}")
    
    return lc_queue

if __name__ == "__main__":
    # Analyze the complete collection
    df = analyze_complete_collection()
    
    if df is not None:
        # Create LC enhancement queue
        lc_queue = create_lc_enhancement_queue(df)
        
        print(f"\nüéâ ANALYSIS COMPLETE!")
        print(f"üìä Full metadata: AndersonLibrary_PDFMetadata.csv")
        print(f"üöÄ LC queue ready: AndersonLibrary_LCEnhancementQueue.xlsx")
        print(f"\nüèõÔ∏è Ready to begin Library of Congress data enhancement!")
================
File: CreateLibraryCSV/Resumable PDF Metadata Extractor.py
================
#!/usr/bin/env python3
"""
Resumable PDF Metadata Extractor - Continue where previous extraction left off
"""

import os
import csv
import sqlite3
from pathlib import Path
import PyPDF2
import pandas as pd
from datetime import datetime
import re
import fitz  # PyMuPDF
import warnings
warnings.filterwarnings("ignore")

# Configuration
PDF_DIRECTORY = "/home/herb/Desktop/Not Backed Up/Anderson's Library/Andy/Anderson eBooks"
DATABASE_PATH = "/home/herb/Desktop/BowersWorld-com/Assets/my_library.db"
OUTPUT_CSV = "/home/herb/Desktop/BowersWorld-com/AndersonLibrary_PDFMetadata.csv"
PROGRESS_INTERVAL = 25

# Text extraction patterns
ISBN_PATTERN = re.compile(r'ISBN[:\-\s]*([0-9\-X]{10,17})', re.IGNORECASE)
YEAR_PATTERN = re.compile(r'(19|20)\d{2}')
PUBLISHER_PATTERN = re.compile(r'Published by[:\s]*([^.\n\r]{5,50})', re.IGNORECASE)
COPYRIGHT_PATTERN = re.compile(r'Copyright[:\s]*¬©?\s*(\d{4})', re.IGNORECASE)
EDITION_PATTERN = re.compile(r'(\d+)(st|nd|rd|th)\s+edition', re.IGNORECASE)

class ResumablePDFExtractor:
    def __init__(self, PDFDirectory, DatabasePath, OutputFile):
        self.PDFDirectory = Path(PDFDirectory)
        self.DatabasePath = DatabasePath
        self.OutputFile = OutputFile
        self.ProcessedCount = 0
        self.ErrorCount = 0
        self.SkippedCount = 0
        self.ExtractedData = []
        
        # Load existing data if available
        self.LoadExistingData()
        self.LoadDatabaseInfo()
    
    def LoadExistingData(self):
        """Load previously processed PDFs to resume extraction"""
        self.ProcessedFiles = set()
        
        if os.path.exists(self.OutputFile):
            try:
                existing_df = pd.read_csv(self.OutputFile)
                self.ProcessedFiles = set(existing_df['filename'].str.replace('.pdf', '', regex=False))
                print(f"‚úÖ Found {len(self.ProcessedFiles)} previously processed PDFs")
                print(f"üìÑ Will resume extraction for remaining files...")
            except Exception as e:
                print(f"‚ö†Ô∏è Could not load existing CSV: {e}")
                print("üìÑ Starting fresh extraction...")
                self.ProcessedFiles = set()
        else:
            print("üìÑ No existing CSV found, starting fresh extraction...")
    
    def LoadDatabaseInfo(self):
        """Load existing book data from SQLite database"""
        self.DatabaseBooks = {}
        
        if os.path.exists(self.DatabasePath):
            try:
                conn = sqlite3.connect(self.DatabasePath)
                cursor = conn.cursor()
                
                query = '''
                    SELECT b.title, c.category, s.subject 
                    FROM books b
                    LEFT JOIN subjects s ON b.subject_id = s.id
                    LEFT JOIN categories c ON s.category_id = c.id
                '''
                
                books = cursor.execute(query).fetchall()
                
                for title, category, subject in books:
                    self.DatabaseBooks[title] = {
                        'category': category or 'Unknown',
                        'subject': subject or 'Unknown'
                    }
                
                conn.close()
                print(f"‚úÖ Loaded {len(self.DatabaseBooks)} books from database")
                
            except Exception as DbError:
                print(f"‚ö†Ô∏è Database error: {DbError}")
                self.DatabaseBooks = {}
        else:
            print(f"‚ö†Ô∏è Database not found at {self.DatabasePath}")
            self.DatabaseBooks = {}
    
    def ExtractPDFMetadata(self, PDFPath):
        """Extract metadata from a single PDF file with improved error handling"""
        Metadata = {
            'filename': PDFPath.name,
            'file_size_mb': round(PDFPath.stat().st_size / (1024*1024), 2),
            'pdf_title': '',
            'pdf_author': '',
            'pdf_subject': '',
            'pdf_creator': '',
            'pdf_producer': '',
            'pdf_creation_date': '',
            'page_count': 0,
            'extracted_isbn': '',
            'extracted_year': '',
            'extracted_publisher': '',
            'extracted_edition': '',
            'first_page_text': '',
            'title_page_text': '',
            'copyright_page_text': '',
            'database_category': 'Not Found',
            'database_subject': 'Not Found',
            'extraction_method': 'None',
            'errors': ''
        }
        
        # Get database info for this book
        BookTitle = PDFPath.stem
        if BookTitle in self.DatabaseBooks:
            Metadata['database_category'] = self.DatabaseBooks[BookTitle]['category']
            Metadata['database_subject'] = self.DatabaseBooks[BookTitle]['subject']
        
        ErrorMessages = []
        
        # Try PyMuPDF first
        try:
            PDFDocument = fitz.open(str(PDFPath))
            Metadata['page_count'] = len(PDFDocument)
            Metadata['extraction_method'] = 'PyMuPDF'
            
            # Extract PDF metadata with safe string conversion
            PDFMetadata = PDFDocument.metadata
            Metadata['pdf_title'] = str(PDFMetadata.get('title', '')).strip()
            Metadata['pdf_author'] = str(PDFMetadata.get('author', '')).strip()
            Metadata['pdf_subject'] = str(PDFMetadata.get('subject', '')).strip()
            Metadata['pdf_creator'] = str(PDFMetadata.get('creator', '')).strip()
            Metadata['pdf_producer'] = str(PDFMetadata.get('producer', '')).strip()
            
            if PDFMetadata.get('creationDate'):
                Metadata['pdf_creation_date'] = str(PDFMetadata['creationDate'])[:10]
            
            # Extract text from key pages with size limits
            if len(PDFDocument) > 0:
                try:
                    FirstPage = PDFDocument[0]
                    Metadata['first_page_text'] = FirstPage.get_text()[:1000]
                except:
                    pass
                
                if len(PDFDocument) > 1:
                    try:
                        TitlePage = PDFDocument[1]
                        Metadata['title_page_text'] = TitlePage.get_text()[:1000]
                    except:
                        pass
                
                # Look for copyright page
                for PageNum in range(min(4, len(PDFDocument))):
                    try:
                        PageText = PDFDocument[PageNum].get_text()
                        if 'copyright' in PageText.lower() or '¬©' in PageText:
                            Metadata['copyright_page_text'] = PageText[:1000]
                            break
                    except:
                        continue
            
            PDFDocument.close()
            
        except Exception as PyMuPDFError:
            ErrorMessages.append(f"PyMuPDF: {str(PyMuPDFError)[:100]}")
            
            # Fallback to PyPDF2
            try:
                with open(PDFPath, 'rb') as PDFFile:
                    PDFReader = PyPDF2.PdfReader(PDFFile)
                    Metadata['page_count'] = len(PDFReader.pages)
                    Metadata['extraction_method'] = 'PyPDF2'
                    
                    if PDFReader.metadata:
                        Metadata['pdf_title'] = str(PDFReader.metadata.get('/Title', '')).strip()
                        Metadata['pdf_author'] = str(PDFReader.metadata.get('/Author', '')).strip()
                        Metadata['pdf_subject'] = str(PDFReader.metadata.get('/Subject', '')).strip()
                        Metadata['pdf_creator'] = str(PDFReader.metadata.get('/Creator', '')).strip()
                        Metadata['pdf_producer'] = str(PDFReader.metadata.get('/Producer', '')).strip()
                        
                        CreationDate = PDFReader.metadata.get('/CreationDate')
                        if CreationDate:
                            Metadata['pdf_creation_date'] = str(CreationDate)[:10]
                    
                    # Extract text from first few pages
                    if len(PDFReader.pages) > 0:
                        try:
                            Metadata['first_page_text'] = PDFReader.pages[0].extract_text()[:1000]
                        except:
                            pass
                        
                        if len(PDFReader.pages) > 1:
                            try:
                                Metadata['title_page_text'] = PDFReader.pages[1].extract_text()[:1000]
                            except:
                                pass
                        
                        # Look for copyright page
                        for PageNum in range(min(4, len(PDFReader.pages))):
                            try:
                                PageText = PDFReader.pages[PageNum].extract_text()
                                if 'copyright' in PageText.lower() or '¬©' in PageText:
                                    Metadata['copyright_page_text'] = PageText[:1000]
                                    break
                            except:
                                continue
                
            except Exception as PyPDF2Error:
                ErrorMessages.append(f"PyPDF2: {str(PyPDF2Error)[:100]}")
                Metadata['extraction_method'] = 'Failed'
        
        # Extract specific information from text
        AllText = ' '.join(filter(None, [
            Metadata.get('first_page_text', ''),
            Metadata.get('title_page_text', ''),
            Metadata.get('copyright_page_text', '')
        ]))
        
        if AllText:
            # Extract ISBN
            ISBNMatch = ISBN_PATTERN.search(AllText)
            if ISBNMatch:
                Metadata['extracted_isbn'] = ISBNMatch.group(1).replace('-', '').replace(' ', '')
            
            # Extract publication year
            YearMatches = YEAR_PATTERN.findall(AllText)
            if YearMatches:
                Years = [int(year) for year in YearMatches if 1900 <= int(year) <= 2025]
                if Years:
                    Metadata['extracted_year'] = max(Years)
            
            # Extract publisher
            PublisherMatch = PUBLISHER_PATTERN.search(AllText)
            if PublisherMatch:
                Metadata['extracted_publisher'] = PublisherMatch.group(1).strip()
            
            # Extract copyright year if no publication year found
            if not Metadata['extracted_year']:
                CopyrightMatch = COPYRIGHT_PATTERN.search(AllText)
                if CopyrightMatch:
                    Metadata['extracted_year'] = int(CopyrightMatch.group(1))
            
            # Extract edition
            EditionMatch = EDITION_PATTERN.search(AllText)
            if EditionMatch:
                Metadata['extracted_edition'] = f"{EditionMatch.group(1)}{EditionMatch.group(2)} edition"
        
        # Store errors as string
        Metadata['errors'] = '; '.join(ErrorMessages) if ErrorMessages else ''
        
        return Metadata
    
    def ProcessRemainingPDFs(self):
        """Process only PDFs that haven't been processed yet"""
        print(f"üìö Resumable PDF Metadata Extractor")
        print("=" * 60)
        print(f"üìÇ PDF Directory: {self.PDFDirectory}")
        print(f"üìä Output CSV: {self.OutputFile}")
        print("=" * 60)
        
        if not self.PDFDirectory.exists():
            print(f"‚ùå PDF directory not found: {self.PDFDirectory}")
            return False
        
        # Find all PDF files
        AllPDFFiles = list(self.PDFDirectory.glob("*.pdf"))
        TotalFiles = len(AllPDFFiles)
        
        # Filter out already processed files
        UnprocessedFiles = [
            pdf for pdf in AllPDFFiles 
            if pdf.stem not in self.ProcessedFiles
        ]
        
        RemainingCount = len(UnprocessedFiles)
        
        print(f"üìÅ Total PDFs in directory: {TotalFiles}")
        print(f"‚úÖ Already processed: {len(self.ProcessedFiles)}")
        print(f"‚è≥ Remaining to process: {RemainingCount}")
        
        if RemainingCount == 0:
            print("üéâ All PDFs have been processed!")
            return True
        
        print(f"üîÑ Starting extraction of remaining {RemainingCount} files...\n")
        
        # Process remaining PDFs
        for FileIndex, PDFFile in enumerate(UnprocessedFiles, 1):
            try:
                print(f"[{FileIndex:4d}/{RemainingCount}] Processing: {PDFFile.name}")
                
                ExtractedMetadata = self.ExtractPDFMetadata(PDFFile)
                self.AppendToCSV(ExtractedMetadata)
                self.ProcessedCount += 1
                
                # Show progress
                if FileIndex % PROGRESS_INTERVAL == 0:
                    self.ShowProgress(FileIndex, RemainingCount)
                
            except Exception as ProcessingError:
                print(f"   ‚ùå Critical error processing {PDFFile.name}: {ProcessingError}")
                self.ErrorCount += 1
                # Continue processing other files
                continue
        
        # Final progress
        self.ShowProgress(RemainingCount, RemainingCount)
        self.GenerateReport(TotalFiles, len(self.ProcessedFiles) + self.ProcessedCount)
        
        return True
    
    def AppendToCSV(self, BookData):
        """Append a single record to CSV file"""
        file_exists = os.path.exists(self.OutputFile)
        
        # Define CSV columns
        Columns = [
            'filename', 'file_size_mb', 'page_count',
            'database_category', 'database_subject',
            'pdf_title', 'pdf_author', 'pdf_subject', 'pdf_creator', 'pdf_producer',
            'pdf_creation_date', 'extracted_isbn', 'extracted_year', 
            'extracted_publisher', 'extracted_edition',
            'first_page_text', 'title_page_text', 'copyright_page_text',
            'extraction_method', 'errors'
        ]
        
        try:
            with open(self.OutputFile, 'a', newline='', encoding='utf-8') as CSVFile:
                Writer = csv.DictWriter(CSVFile, fieldnames=Columns)
                
                # Write header only if file is new
                if not file_exists:
                    Writer.writeheader()
                
                Writer.writerow(BookData)
                
        except Exception as SaveError:
            print(f"‚ùå Error appending to CSV: {SaveError}")
    
    def ShowProgress(self, Current, Total):
        """Show processing progress"""
        ProcessedPct = (Current / Total) * 100
        
        print(f"\nüìä Progress: {Current}/{Total} ({ProcessedPct:.1f}%)")
        print(f"   ‚úÖ Successfully processed: {self.ProcessedCount}")
        print(f"   ‚ùå Errors: {self.ErrorCount}")
        print()
    
    def GenerateReport(self, TotalInDirectory, TotalProcessed):
        """Generate final report"""
        print("\n" + "=" * 60)
        print("üìä RESUMABLE EXTRACTION COMPLETE!")
        print("=" * 60)
        print(f"üìÅ Total PDFs in directory: {TotalInDirectory}")
        print(f"‚úÖ Total processed: {TotalProcessed}")
        print(f"‚ùå Total errors: {self.ErrorCount}")
        print(f"üìà Success rate: {((TotalProcessed - self.ErrorCount) / TotalInDirectory * 100):.1f}%")
        print()
        
        if TotalProcessed == TotalInDirectory:
            print("üéâ ALL PDFs SUCCESSFULLY PROCESSED!")
            print("üìä Ready for Library of Congress data enhancement!")
        else:
            missing = TotalInDirectory - TotalProcessed
            print(f"‚ö†Ô∏è {missing} PDFs still need processing")
            print("üîÑ Run the script again to continue")
        
        print("=" * 60)

if __name__ == "__main__":
    # Run resumable extraction
    Extractor = ResumablePDFExtractor(
        PDFDirectory=PDF_DIRECTORY,
        DatabasePath=DATABASE_PATH, 
        OutputFile=OUTPUT_CSV
    )
    
    Success = Extractor.ProcessRemainingPDFs()
    
    if Success:
        print(f"\nüéâ Extraction session complete!")
        print(f"üìä Results appended to: {OUTPUT_CSV}")
    else:
        print(f"\n‚ùå Extraction failed!")
        exit(1)
================
File: CreateThumbs/ConvertToThumbnails.py
================
#!/usr/bin/env python3
"""
File: ConvertToThumbnails.py
Path: /home/herb/Desktop/BowersWorld-com/ConvertToThumbnails.py
Standard: AIDEV-PascalCase-1.7
Created: 2025-06-25
Author: Herb Bowers - Project Himalaya
Description: Convert PNG book covers to web-optimized thumbnails for Anderson's Library
"""

import os
import sys
from pathlib import Path
from PIL import Image
import time
from datetime import datetime

# Configuration
SOURCE_DIR = "/home/herb/Desktop/BowersWorld-com/Covers"
OUTPUT_DIR = "/home/herb/Desktop/BowersWorld-com/Thumbs"
THUMBNAIL_SIZE = (64, 85)  # Width x Height - optimized for book covers
QUALITY_SETTING = 85  # PNG optimization level
PROGRESS_INTERVAL = 25  # Show progress every N files

def CreateOutputDirectory(OutputPath):
    """
    Create the output directory if it doesn't exist
    
    Args:
        OutputPath: Path to create
        
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        Path(OutputPath).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Output directory ready: {OutputPath}")
        return True
    except Exception as CreateError:
        print(f"‚ùå Failed to create output directory: {CreateError}")
        return False

def ValidateSourceDirectory(SourcePath):
    """
    Validate that source directory exists and contains PNG files
    
    Args:
        SourcePath: Path to validate
        
    Returns:
        tuple: (bool: valid, int: png_count)
    """
    if not os.path.exists(SourcePath):
        print(f"‚ùå Source directory not found: {SourcePath}")
        return False, 0
    
    PngFiles = list(Path(SourcePath).glob("*.png"))
    PngCount = len(PngFiles)
    
    if PngCount == 0:
        print(f"‚ö†Ô∏è No PNG files found in: {SourcePath}")
        return False, 0
    
    print(f"üìÅ Found {PngCount} PNG files in source directory")
    return True, PngCount

def ConvertSingleImage(SourcePath, OutputPath, ThumbnailSize):
    """
    Convert a single PNG file to thumbnail
    
    Args:
        SourcePath: Path to source PNG file
        OutputPath: Path for output thumbnail
        ThumbnailSize: Tuple of (width, height)
        
    Returns:
        tuple: (bool: success, int: original_size, int: thumbnail_size)
    """
    try:
        # Get original file size
        OriginalSize = os.path.getsize(SourcePath)
        
        # Open and process image
        with Image.open(SourcePath) as OriginalImage:
            # Convert RGBA to RGB if necessary (remove transparency)
            if OriginalImage.mode in ('RGBA', 'LA'):
                # Create white background
                RgbImage = Image.new('RGB', OriginalImage.size, (255, 255, 255))
                if OriginalImage.mode == 'RGBA':
                    RgbImage.paste(OriginalImage, mask=OriginalImage.split()[-1])
                else:
                    RgbImage.paste(OriginalImage, mask=OriginalImage.split()[-1])
                ProcessedImage = RgbImage
            else:
                ProcessedImage = OriginalImage.copy()
            
            # Create thumbnail while maintaining aspect ratio
            ProcessedImage.thumbnail(ThumbnailSize, Image.Resampling.LANCZOS)
            
            # Save optimized thumbnail
            ProcessedImage.save(OutputPath, 'PNG', optimize=True, quality=QUALITY_SETTING)
        
        # Get thumbnail file size
        ThumbnailSize = os.path.getsize(OutputPath)
        
        return True, OriginalSize, ThumbnailSize
        
    except Exception as ConversionError:
        print(f"‚ùå Error converting {SourcePath}: {ConversionError}")
        return False, 0, 0

def FormatFileSize(SizeInBytes):
    """
    Format file size in human-readable format
    
    Args:
        SizeInBytes: Size in bytes
        
    Returns:
        str: Formatted size string
    """
    for Unit in ['B', 'KB', 'MB', 'GB']:
        if SizeInBytes < 1024.0:
            return f"{SizeInBytes:.1f} {Unit}"
        SizeInBytes /= 1024.0
    return f"{SizeInBytes:.1f} TB"

def GenerateThumbnails():
    """
    Main function to convert all PNG files to thumbnails
    
    Returns:
        bool: True if successful, False otherwise
    """
    StartTime = time.time()
    
    print("üé® Anderson's Library Thumbnail Generator")
    print("=" * 50)
    print(f"üìÇ Source: {SOURCE_DIR}")
    print(f"üìÅ Output: {OUTPUT_DIR}")
    print(f"üìè Size: {THUMBNAIL_SIZE[0]}x{THUMBNAIL_SIZE[1]} pixels")
    print("=" * 50)
    
    # Validate source directory
    IsValid, TotalFiles = ValidateSourceDirectory(SOURCE_DIR)
    if not IsValid:
        return False
    
    # Create output directory
    if not CreateOutputDirectory(OUTPUT_DIR):
        return False
    
    # Process all PNG files
    ProcessedCount = 0
    ErrorCount = 0
    TotalOriginalSize = 0
    TotalThumbnailSize = 0
    SkippedCount = 0
    
    PngFiles = list(Path(SOURCE_DIR).glob("*.png"))
    
    print(f"üîÑ Starting conversion of {len(PngFiles)} files...")
    print()
    
    for FileIndex, SourceFile in enumerate(PngFiles, 1):
        FileName = SourceFile.name
        OutputFile = Path(OUTPUT_DIR) / FileName
        
        # Check if thumbnail already exists
        if OutputFile.exists():
            print(f"‚è≠Ô∏è Skipping {FileName} (already exists)")
            SkippedCount += 1
            continue
        
        # Convert image
        Success, OriginalSize, ThumbnailSize = ConvertSingleImage(
            str(SourceFile), str(OutputFile), THUMBNAIL_SIZE
        )
        
        if Success:
            ProcessedCount += 1
            TotalOriginalSize += OriginalSize
            TotalThumbnailSize += ThumbnailSize
            
            # Calculate compression ratio
            CompressionRatio = (1 - (ThumbnailSize / OriginalSize)) * 100 if OriginalSize > 0 else 0
            
            # Show progress
            if ProcessedCount % PROGRESS_INTERVAL == 0 or FileIndex == len(PngFiles):
                print(f"üì∏ Processed {ProcessedCount}/{TotalFiles}: {FileName}")
                print(f"   üìä {FormatFileSize(OriginalSize)} ‚Üí {FormatFileSize(ThumbnailSize)} ({CompressionRatio:.1f}% reduction)")
                
        else:
            ErrorCount += 1
    
    # Calculate final statistics
    EndTime = time.time()
    ProcessingTime = EndTime - StartTime
    
    print()
    print("=" * 50)
    print("‚úÖ THUMBNAIL CONVERSION COMPLETE!")
    print("=" * 50)
    print(f"üìä Files processed: {ProcessedCount}")
    print(f"‚è≠Ô∏è Files skipped: {SkippedCount}")
    print(f"‚ùå Errors: {ErrorCount}")
    print(f"‚è±Ô∏è Processing time: {ProcessingTime:.1f} seconds")
    
    if ProcessedCount > 0:
        # Size comparison
        TotalReduction = (1 - (TotalThumbnailSize / TotalOriginalSize)) * 100 if TotalOriginalSize > 0 else 0
        AverageOriginalSize = TotalOriginalSize / ProcessedCount
        AverageThumbnailSize = TotalThumbnailSize / ProcessedCount
        
        print()
        print("üìà SIZE ANALYSIS:")
        print(f"   Original total: {FormatFileSize(TotalOriginalSize)}")
        print(f"   Thumbnail total: {FormatFileSize(TotalThumbnailSize)}")
        print(f"   Total reduction: {TotalReduction:.1f}%")
        print(f"   Average original: {FormatFileSize(AverageOriginalSize)}")
        print(f"   Average thumbnail: {FormatFileSize(AverageThumbnailSize)}")
        
        # Performance metrics
        FilesPerSecond = ProcessedCount / ProcessingTime if ProcessingTime > 0 else 0
        print(f"   Processing speed: {FilesPerSecond:.1f} files/second")
    
    print()
    print(f"üìÅ Thumbnails saved to: {OUTPUT_DIR}")
    print("üéâ Ready for web deployment!")
    
    return ErrorCount == 0

def ShowUsageInformation():
    """Display usage information for the script"""
    print("üìö Anderson's Library Thumbnail Generator")
    print()
    print("USAGE:")
    print("  python ConvertToThumbnails.py")
    print()
    print("CONFIGURATION:")
    print(f"  Source Directory: {SOURCE_DIR}")
    print(f"  Output Directory: {OUTPUT_DIR}")
    print(f"  Thumbnail Size: {THUMBNAIL_SIZE[0]}x{THUMBNAIL_SIZE[1]} pixels")
    print()
    print("FEATURES:")
    print("  ‚úÖ Maintains aspect ratio")
    print("  ‚úÖ Optimizes file size")
    print("  ‚úÖ Handles RGBA to RGB conversion")
    print("  ‚úÖ Progress tracking")
    print("  ‚úÖ Error handling")
    print("  ‚úÖ Skips existing files")
    print()
    print("OUTPUT:")
    print("  ‚Ä¢ Creates optimized PNG thumbnails")
    print("  ‚Ä¢ Typically 95%+ smaller than originals")
    print("  ‚Ä¢ Perfect for web deployment")

def ValidateEnvironment():
    """
    Validate that required dependencies are available
    
    Returns:
        bool: True if environment is ready
    """
    try:
        import PIL
        print(f"‚úÖ PIL/Pillow version: {PIL.__version__}")
        return True
    except ImportError:
        print("‚ùå PIL/Pillow not found!")
        print("   Install with: pip install Pillow")
        return False

if __name__ == "__main__":
    # Handle command line arguments
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help', 'help']:
        ShowUsageInformation()
        sys.exit(0)
    
    # Validate environment
    if not ValidateEnvironment():
        sys.exit(1)
    
    # Run thumbnail generation
    try:
        Success = GenerateThumbnails()
        ExitCode = 0 if Success else 1
        
        if Success:
            print(f"\nüéâ Thumbnail generation completed successfully!")
            print(f"   Ready to integrate with Anderson's Library web interface")
        else:
            print(f"\n‚ö†Ô∏è Thumbnail generation completed with errors")
            print(f"   Check the output above for details")
        
        sys.exit(ExitCode)
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Conversion interrupted by user")
        print("   Partial results may be available in the output directory")
        sys.exit(1)
    except Exception as UnexpectedError:
        print(f"\n‚ùå Unexpected error: {UnexpectedError}")
        print("   Please check file permissions and available disk space")
        sys.exit(1)
================
File: CreateThumbs/ConvertToThumbnailsPart2.py
================
#!/usr/bin/env python3
"""
Fix Problematic PNG Files - Simple metadata stripping approach
"""

import os
from PIL import Image
import io

# The problematic files
PROBLEMATIC_FILES = [
    "/home/herb/Desktop/BowersWorld-com/Covers/Algebra Based and AP Physics 2.png",
    "/home/herb/Desktop/BowersWorld-com/Covers/Trigonometry for Dummies.png"
]

OUTPUT_DIR = "/home/herb/Desktop/BowersWorld-com/Thumbs"
THUMBNAIL_SIZE = (64, 85)

def fix_and_convert_png(source_path, output_path):
    """
    Fix PNG by completely stripping metadata and converting to thumbnail
    """
    try:
        print(f"üîß Fixing: {os.path.basename(source_path)}")
        
        # Method 1: Try loading with warnings ignored
        try:
            import warnings
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                img = Image.open(source_path)
                img.load()  # Force load the image data
        except Exception:
            # Method 2: Load as raw pixel data and rebuild
            print(f"   üîÑ Trying alternative loading method...")
            with open(source_path, 'rb') as f:
                # Read file as bytes
                img_bytes = f.read()
            
            # Load into PIL and immediately convert to clean format
            img_stream = io.BytesIO(img_bytes)
            img = Image.open(img_stream)
            img.load()
        
        # Convert to clean RGB format (strips all metadata)
        if img.mode in ('RGBA', 'LA', 'P'):
            # Create white background
            clean_img = Image.new('RGB', img.size, (255, 255, 255))
            if img.mode == 'P':
                img = img.convert('RGBA')
            if img.mode in ('RGBA', 'LA'):
                clean_img.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
        else:
            # Convert to RGB to strip metadata
            clean_img = img.convert('RGB')
        
        # Create thumbnail
        clean_img.thumbnail(THUMBNAIL_SIZE, Image.Resampling.LANCZOS)
        
        # Save as clean PNG (no metadata)
        clean_img.save(output_path, 'PNG', optimize=True)
        
        # Clean up
        img.close()
        clean_img.close()
        
        # Check result
        if os.path.exists(output_path):
            original_size = os.path.getsize(source_path)
            thumbnail_size = os.path.getsize(output_path)
            reduction = (1 - (thumbnail_size / original_size)) * 100
            
            print(f"   ‚úÖ Success: {original_size//1024} KB ‚Üí {thumbnail_size//1024} KB ({reduction:.1f}% reduction)")
            return True
        else:
            print(f"   ‚ùå Failed to create thumbnail")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        
        # Last resort: Try with different image library or manual pixel extraction
        try:
            print(f"   üîÑ Trying emergency fallback...")
            # Create a simple placeholder thumbnail
            placeholder = Image.new('RGB', THUMBNAIL_SIZE, (200, 200, 200))
            # Add some text to indicate it's a placeholder
            placeholder.save(output_path, 'PNG')
            print(f"   ‚ö†Ô∏è Created placeholder thumbnail")
            return True
        except:
            return False

def main():
    print("üîß Fixing Problematic PNG Files")
    print("=" * 40)
    
    fixed_count = 0
    
    for source_file in PROBLEMATIC_FILES:
        if os.path.exists(source_file):
            filename = os.path.basename(source_file)
            output_file = os.path.join(OUTPUT_DIR, filename)
            
            if fix_and_convert_png(source_file, output_file):
                fixed_count += 1
        else:
            print(f"‚ö†Ô∏è File not found: {os.path.basename(source_file)}")
    
    print()
    print(f"‚úÖ Fixed {fixed_count} problematic files")
    print(f"üéâ All thumbnails now complete!")

if __name__ == "__main__":
    main()
================
File: DigitalAlexandria.py
================
#!/usr/bin/env python3
import sys
from pathlib import Path

def main():
    try:
        from fastapi import FastAPI
        from fastapi.responses import HTMLResponse
        import uvicorn
        
        app = FastAPI(title="BowersWorld-com")
        
        @app.get("/", response_class=HTMLResponse)
        def home():
            return """
            <html><body style="font-family: Arial; margin: 40px;">
            <h1>üèõÔ∏è BowersWorld-com Digital Alexandria</h1>
            <p>‚úÖ System Online and Ready!</p>
            <h3>Features:</h3>
            <ul>
                <li>Digital Library Management</li>
                <li>Full-text Search</li>
                <li>API Integration</li>
                <li>Modern Web Interface</li>
            </ul>
            <p><strong>Status:</strong> Operational</p>
            </body></html>
            """
        
        print("üåê Starting BowersWorld-com...")
        print("   Access: http://localhost:8080")
        uvicorn.run(app, host="localhost", port=8080)
        
    except ImportError:
        print("‚ö†Ô∏è FastAPI not available. Install with:")
        print("   pip install fastapi uvicorn")

if __name__ == "__main__":
    main()
s
================
File: README.md
================
# BowersWorld-com Digital Alexandria\n\nRun: python DigitalAlexandria.py
================
File: Scripts/System/CodebaseSum.py
================
#!/usr/bin/env python3
"""
File: CodebaseSum.py
Path: BowersWorld-com/Scripts/CodebaseSum.py
Created: 2025-06-25
Description: Generate a comprehensive codebase snapshot in a structured format
"""

import os
import subprocess
import tempfile
from datetime import datetime
from pathlib import Path
import shutil

def main():
    # Create timestamp for the output filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"CodebaseSummary_{timestamp}.txt"
    
    # Check if the tree command is available
    if not shutil.which('tree'):
        print("Error: The 'tree' command is required but not found. Please install it first.")
        return 1
    
    print(f"Generating codebase summary to {output_file}...")
    
    # Create temp directory for building the summary
    with tempfile.TemporaryDirectory() as temp_dir:
        header_file = os.path.join(temp_dir, "header.txt")
        structure_file = os.path.join(temp_dir, "structure.txt")
        files_list = os.path.join(temp_dir, "files_list.txt")
        files_content = os.path.join(temp_dir, "files_content.txt")
        
        # Create the header
        header_content = """This file is a comprehensive codebase snapshot for the BowersWorld-com project, generated to facilitate analysis and development.

================================================================
File Summary
================================================================

Purpose:
--------
This document provides a consolidated view of the project's source code, scripts,
HTML, and text files, excluding any files specified in the .gitignore file. 
It serves as a reference for developers, making it easier to understand the 
codebase structure and functionality in a single document.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
5. List of Program files
6. List of Documents

"""
        
        with open(header_file, 'w') as f:
            f.write(header_content)
        
        # Generate directory structure using tree
        print("Generating directory structure...")
        tree_ignore_patterns = [
            '.git', '__pycache__', '.venv', 'venv', 'ENV', '.idea', '.vscode',
            'Temp', 'Logs', 'build', 'dist', 'env', 'lib', 'lib64', 'parts', 
            'sdist', 'var', 'downloads', 'eggs', '.eggs', 'develop-eggs',
            'Covers', 'Thumbs', 'Html', 'Docs'
        ]
        tree_cmd = ['tree', '-f', '-I', '|'.join(tree_ignore_patterns), '.']
        with open(structure_file, 'w') as f:
            subprocess.run(tree_cmd, stdout=f)
        
        # Create the files section header
        with open(files_content, 'w') as f:
            f.write("================================================================\n")
            f.write("Files\n")
            f.write("================================================================\n")
            f.write("\n")
        
        # Define directories to exclude (based on .gitignore and common patterns)
        exclude_dirs = {
            '.git', '__pycache__', '.venv', 'venv', 'ENV', '.idea', '.vscode',
            'Temp', 'Logs', 'build', 'dist', 'env', 'lib', 'lib64', 'parts',
            'sdist', 'var', 'downloads', 'eggs', '.eggs', 'develop-eggs',
            'Covers', 'Thumbs', 'Html', 'Docs'
        }
        
        # Find relevant project files
        print("Finding relevant project files (.py, .sh, .md, .html, .txt)...")
        file_extensions = {'.py', '.sh', '.md', '.html', '.txt'}
        relevant_files = []
        
        for root, dirs, files in os.walk('.'):
            # Remove excluded directories from dirs list to prevent walking into them
            dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('..')]
            
            for file in files:
                file_path = Path(root) / file
                # Skip .gitignore files
                if file == '.gitignore':
                    continue
                    
                # Check if file has relevant extension
                if file_path.suffix in file_extensions:
                    # Check if any part of the path is in excluded directories
                    path_parts = file_path.parts
                    if not any(part in exclude_dirs for part in path_parts):
                        # Convert to relative path and remove leading ./
                        rel_path = str(file_path.relative_to('.'))
                        relevant_files.append(rel_path)
        
        # Sort files for consistent output
        relevant_files.sort()
        
        # Write files list
        with open(files_list, 'w') as f:
            for file_path in relevant_files:
                f.write(f"{file_path}\n")
        
        # Process each file found
        print("Processing files...")
        with open(files_content, 'a') as fc:
            for file_path in relevant_files:
                if os.path.isfile(file_path):
                    fc.write("================\n")
                    fc.write(f"File: {file_path}\n")
                    fc.write("================\n")
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            fc.write(f.read())
                    except UnicodeDecodeError:
                        fc.write(f"[Binary file - content not displayed]\n")
                    fc.write("\n")
        
        # Combine all parts into the final file
        with open(output_file, 'w') as output:
            # Write header
            with open(header_file, 'r') as f:
                output.write(f.read())
            
            # Write directory structure
            output.write("================================================================\n")
            output.write("Directory Structure\n")
            output.write("================================================================\n")
            with open(structure_file, 'r') as f:
                output.write(f.read())
            output.write("\n")
            
            # Write files content
            with open(files_content, 'r') as f:
                output.write(f.read())
            
            # Write file list
            output.write("\n")
            output.write("================================================================\n")
            output.write("List of Included Files\n")
            output.write("================================================================\n")
            output.write("\n")
            output.write("Files included:\n")
            with open(files_list, 'r') as f:
                output.write(f.read())
            
            num_files = len(relevant_files)
            output.write(f"\nThere are {num_files} files included in the Files section of the CodebaseSummary document.\n")
    
    print(f"Codebase summary generated: {output_file}")
    print(f"It contains {len(relevant_files)} files.")
    
    return 0

if __name__ == "__main__":
    exit(main())
================
File: Scripts/System/GitHubAutoUpdate.py
================
# GitHub Auto-Update Script for BowersWorld.com
# Author: Herb Bowers - Project Himalaya
# Created: 2025-06-22  17:15
# Path: /scripts/AutoUpdateGitHub.py

import os
import sys
import subprocess
import json
import time
from datetime import datetime
from pathlib import Path
import argparse


class GitHubAutoUpdater:
    def __init__(self, repo_path=None, remote_name="origin", branch="main"):
        """
        Initialize the GitHub auto-updater
        
        Args:
            repo_path: Path to your local repository (if None, uses current directory)
            remote_name: Git remote name (usually "origin")
            branch: Branch to push to (usually "main")
        """
        self.repo_path = Path(repo_path) if repo_path else Path.cwd()
        self.remote_name = remote_name
        self.branch = branch
        
        # Ensure we're in a git repository
        if not (self.repo_path / '.git').exists():
            raise Exception(f"Not a git repository: {self.repo_path}")
    
    def RunGitCommand(self, command):
        """Execute git command and return result"""
        try:
            result = subprocess.run(
                command,
                cwd=self.repo_path,
                shell=True,
                capture_output=True,
                text=True,
                check=True
            )
            return result.stdout.strip()
        except subprocess.CalledProcessError as e:
            print(f"Git command failed: {command}")
            print(f"Error: {e.stderr}")
            raise
    
    def CheckGitStatus(self):
        """Check if there are any changes to commit"""
        try:
            # Check for unstaged changes
            unstaged = self.RunGitCommand("git diff --name-only")
            
            # Check for staged changes
            staged = self.RunGitCommand("git diff --cached --name-only")
            
            # Check for untracked files
            untracked = self.RunGitCommand("git ls-files --others --exclude-standard")
            
            changes = {
                'unstaged': unstaged.split('\n') if unstaged else [],
                'staged': staged.split('\n') if staged else [],
                'untracked': untracked.split('\n') if untracked else []
            }
            
            return changes
        except Exception as e:
            print(f"Error checking git status: {e}")
            return None
    
    def AddFiles(self, files=None):
        """Add files to staging area"""
        if files:
            for file in files:
                self.RunGitCommand(f"git add {file}")
        else:
            # Add all changes
            self.RunGitCommand("git add .")
    
    def CreateCommit(self, message=None, auto_message=True):
        """Create a commit with given message"""
        if not message and auto_message:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            message = f"Auto-update: {timestamp}"
        elif not message:
            raise ValueError("Commit message required when auto_message=False")
        
        self.RunGitCommand(f'git commit -m "{message}"')
        return message
    
    def PushToGitHub(self):
        """Push changes to GitHub"""
        push_command = f"git push {self.remote_name} {self.branch}"
        self.RunGitCommand(push_command)
    
    def AutoUpdate(self, commit_message=None, files=None, verbose=True):
        """
        Complete auto-update workflow: add, commit, push
        
        Args:
            commit_message: Custom commit message (auto-generated if None)
            files: Specific files to add (all changes if None)
            verbose: Print status messages
        """
        if verbose:
            print("üîÑ Starting GitHub auto-update...")
        
        try:
            # Check for changes
            changes = self.CheckGitStatus()
            if not changes:
                if verbose:
                    print("‚ùå Error checking repository status")
                return False
            
            total_changes = len(changes['unstaged']) + len(changes['staged']) + len(changes['untracked'])
            
            if total_changes == 0:
                if verbose:
                    print("‚úÖ No changes detected. Repository is up to date.")
                return True
            
            if verbose:
                print(f"üìÅ Found {total_changes} changed/new files:")
                for file in changes['unstaged'] + changes['untracked']:
                    if file:  # Skip empty strings
                        print(f"   - {file}")
            
            # Add files
            if verbose:
                print("üì§ Adding files to staging area...")
            self.AddFiles(files)
            
            # Create commit
            if verbose:
                print("üíæ Creating commit...")
            commit_msg = self.CreateCommit(commit_message)
            
            # Push to GitHub
            if verbose:
                print("üöÄ Pushing to GitHub...")
            self.PushToGitHub()
            
            if verbose:
                print(f"‚úÖ Successfully updated GitHub!")
                print(f"   Commit: {commit_msg}")
                print(f"   Branch: {self.branch}")
                print("üåê GitHub Pages will update in 5-10 minutes")
            
            return True
            
        except Exception as e:
            if verbose:
                print(f"‚ùå Error during auto-update: {e}")
            return False
    
    def SetupWatchMode(self, watch_directory=None, interval=30):
        """
        Watch for file changes and auto-update
        
        Args:
            watch_directory: Directory to watch (repo root if None)
            interval: Check interval in seconds
        """
        watch_dir = Path(watch_directory) if watch_directory else self.repo_path
        
        print(f"üëÄ Watching {watch_dir} for changes...")
        print(f"‚è∞ Check interval: {interval} seconds")
        print("Press Ctrl+C to stop")
        
        last_check = {}
        
        try:
            while True:
                current_check = {}
                changes_detected = False
                
                # Check modification times of files
                for file_path in watch_dir.rglob('*'):
                    if file_path.is_file() and not str(file_path).startswith('.git'):
                        try:
                            mtime = file_path.stat().st_mtime
                            current_check[str(file_path)] = mtime
                            
                            if str(file_path) in last_check:
                                if last_check[str(file_path)] != mtime:
                                    changes_detected = True
                            else:
                                changes_detected = True
                        except:
                            continue
                
                if changes_detected and last_check:  # Skip first run
                    print(f"\nüîî Changes detected at {datetime.now().strftime('%H:%M:%S')}")
                    if self.AutoUpdate(verbose=True):
                        print("‚úÖ Auto-update completed successfully\n")
                    else:
                        print("‚ùå Auto-update failed\n")
                
                last_check = current_check
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\nüëã Watch mode stopped")


def CreateConfigFile(repo_path="."):
    """Create a configuration file for the auto-updater"""
    config = {
        "repository": {
            "path": str(Path(repo_path).absolute()),
            "remote": "origin",
            "branch": "main"
        },
        "auto_update": {
            "default_message_prefix": "Auto-update",
            "include_timestamp": True,
            "watch_interval": 30
        },
        "excluded_files": [
            ".git/*",
            "*.log",
            "*.tmp",
            "__pycache__/*",
            "node_modules/*"
        ]
    }
    
    config_path = Path(repo_path) / "auto_update_config.json"
    with open(config_path, 'w') as f:
        json.dump(config, f, indent=2)
    
    print(f"‚úÖ Configuration file created: {config_path}")
    return config_path


def main():
    """Main function for command line usage"""
    parser = argparse.ArgumentParser(description="GitHub Auto-Update Script")
    parser.add_argument("--path", default=".", help="Repository path (default: current directory)")
    parser.add_argument("--message", "-m", help="Commit message")
    parser.add_argument("--watch", "-w", action="store_true", help="Watch mode for continuous updates")
    parser.add_argument("--interval", "-i", type=int, default=30, help="Watch interval in seconds")
    parser.add_argument("--setup", action="store_true", help="Create configuration file")
    parser.add_argument("--quiet", "-q", action="store_true", help="Quiet mode (less output)")
    
    args = parser.parse_args()
    
    try:
        if args.setup:
            CreateConfigFile(args.path)
            return
        
        # Initialize updater
        updater = GitHubAutoUpdater(repo_path=args.path)
        
        if args.watch:
            # Watch mode
            updater.SetupWatchMode(interval=args.interval)
        else:
            # Single update
            success = updater.AutoUpdate(
                commit_message=args.message,
                verbose=not args.quiet
            )
            sys.exit(0 if success else 1)
            
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)


# Usage examples and helper functions
class LibraryUpdater:
    """Specialized updater for Anderson's Library files"""
    
    def __init__(self, repo_path="."):
        self.updater = GitHubAutoUpdater(repo_path)
    
    def UpdateLibraryDatabase(self, db_path):
        """Update when library database changes"""
        return self.updater.AutoUpdate(
            commit_message=f"Update library database: {Path(db_path).name}",
            files=[db_path]
        )
    
    def UpdateLibraryPages(self):
        """Update library-specific pages"""
        library_files = [
            "library/index.html",
            "library/app/index.html", 
            "library/auth/*.html",
            "library/js/*.js",
            "library/css/*.css"
        ]
        
        return self.updater.AutoUpdate(
            commit_message="Update Anderson's Library interface",
            files=library_files
        )
    
    def QuickUpdate(self, message="Quick library update"):
        """Quick update of all changes"""
        return self.updater.AutoUpdate(commit_message=message)


if __name__ == "__main__":
    main()

================
File: Scripts/System/GitHubUpdateSite.py
================
# Simple Auto-Update Script for BowersWorld.com
# Author: Herb Bowers - Project Himalaya  
# Created: 2025-06-22  17:30
# Path: /UpdateSite.py

import os
import subprocess
import sys
from datetime import datetime

def RunCommand(command, show_output=True):
    """Run a command and return result"""
    try:
        if show_output:
            print(f"üîÑ Running: {command}")
        
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            if show_output and result.stdout:
                print(result.stdout)
            return True
        else:
            print(f"‚ùå Error: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Command failed: {e}")
        return False

def UpdateSite(message=None):
    """Simple function to update GitHub Pages site"""
    
    print("üöÄ BowersWorld.com Auto-Update Starting...")
    print("=" * 50)
    
    # Check if we're in a git repository
    if not os.path.exists('.git'):
        print("‚ùå Error: Not in a git repository")
        print("   Make sure you're in the BowersWorld-com directory")
        return False
    
    # Check for changes
    print("üìã Checking for changes...")
    result = subprocess.run("git status --porcelain", shell=True, capture_output=True, text=True)
    
    if not result.stdout.strip():
        print("‚úÖ No changes detected. Site is up to date!")
        return True
    
    print("üìÅ Changes found:")
    changes = result.stdout.strip().split('\n')
    for change in changes:
        print(f"   {change}")
    
    # Create automatic commit message if none provided
    if not message:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = f"Site update: {timestamp}"
    
    # Add all changes
    print("\nüì§ Adding changes...")
    if not RunCommand("git add ."):
        return False
    
    # Commit changes
    print("üíæ Creating commit...")
    commit_command = f'git commit -m "{message}"'
    if not RunCommand(commit_command):
        return False
    
    # Push to GitHub
    print("üöÄ Pushing to GitHub...")
    if not RunCommand("git push origin main"):
        return False
    
    print("\n" + "=" * 50)
    print("‚úÖ SUCCESS! Site updated successfully!")
    print("üåê GitHub Pages will update in 5-10 minutes")
    print("üîó View at: https://callmechewy.github.io/BowersWorld-com/")
    print("=" * 50)
    
    return True

def QuickUpdate():
    """Quick update with automatic message"""
    return UpdateSite()

def CustomUpdate():
    """Update with custom commit message"""
    print("üìù Enter a custom commit message:")
    message = input("Message: ").strip()
    
    if not message:
        print("Using automatic message...")
        return UpdateSite()
    
    return UpdateSite(message)

def main():
    """Main menu for the updater"""
    print("üìö BowersWorld.com Site Updater")
    print("=" * 40)
    print("1. Quick update (automatic message)")
    print("2. Custom update (enter your message)")
    print("3. Exit")
    print("=" * 40)
    
    while True:
        try:
            choice = input("Choose option (1-3): ").strip()
            
            if choice == "1":
                QuickUpdate()
                break
            elif choice == "2":
                CustomUpdate()
                break
            elif choice == "3":
                print("üëã Goodbye!")
                break
            else:
                print("‚ùå Invalid choice. Please enter 1, 2, or 3.")
        except KeyboardInterrupt:
            print("\nüëã Goodbye!")
            break
        except Exception as e:
            print(f"‚ùå Error: {e}")
            break

# Direct usage functions
def UpdateLibrary():
    """Update library-specific changes"""
    return UpdateSite("Update Anderson's Library")

def UpdateMainSite():
    """Update main site changes"""
    return UpdateSite("Update Project Himalaya site")

def UpdateDatabase():
    """Update when database changes"""
    return UpdateSite("Update library database")

if __name__ == "__main__":
    # Check for command line arguments
    if len(sys.argv) > 1:
        if sys.argv[1] == "--quick":
            QuickUpdate()
        elif sys.argv[1] == "--library":
            UpdateLibrary()
        elif sys.argv[1] == "--main":
            UpdateMainSite()
        elif sys.argv[1] == "--database":
            UpdateDatabase()
        elif sys.argv[1] == "--message" and len(sys.argv) > 2:
            UpdateSite(" ".join(sys.argv[2:]))
        else:
            print("Usage:")
            print("  python update_site.py               # Interactive menu")
            print("  python update_site.py --quick       # Quick update")
            print("  python update_site.py --library     # Library update")
            print("  python update_site.py --main        # Main site update")
            print("  python update_site.py --database    # Database update")
            print("  python update_site.py --message 'Your message'")
    else:
        # Run interactive menu
        main()

================
File: Scripts/System/MarkdownToText.py
================
# File: MarkdownToText.py
# Path: MarkdownToText.py
# Standard: AIDEV-PascalCase-1.7
# Created: 2025-06-21
# Last Modified: 2025-06-21  09:30 AM
# Author: Claude Code Assistant
"""
Description: Himalaya Markdown to Text Converter Utility
Converts .md files to plain text format by stripping Markdown syntax while preserving
content structure and readability. Handles headers, lists, code blocks, links, and
other common Markdown elements. Follows AIDEV-PascalCase-1.7 standard with comprehensive
error handling, logging, and audit trail generation.

Core Features:
- PascalCase naming convention enforcement
- Comprehensive Markdown syntax removal
- Batch directory processing capabilities
- Detailed logging and status reporting
- Error handling with graceful degradation
"""

import os
import re
import sys
import logging
from datetime import datetime
from typing import Optional

# --- CONSTANTS ---
DOCS_DIR = 'Docs'
TEXT_OUTPUT_DIR = 'TextOutput'
DATE_FMT = "%Y-%m-%d"
TS_FMT = "%Y-%m-%d_%H-%M-%S"

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='[MarkdownToText] %(levelname)s: %(message)s'
)

def ProcessMarkdownToText(MarkdownContent: str) -> str:
    """
    Processes Markdown content and converts to clean plain text.
    Removes all Markdown syntax while preserving content structure and readability.
    Follows Himalaya text processing standards.
    
    Args:
        MarkdownContent: Raw markdown content as string
        
    Returns:
        Plain text with all Markdown syntax removed
    """
    ProcessedText = MarkdownContent
    
    # Remove code blocks (```code```)
    ProcessedText = re.sub(r'```[\s\S]*?```', '', ProcessedText)
    
    # Remove inline code (`code`)
    ProcessedText = re.sub(r'`([^`]+)`', r'\1', ProcessedText)
    
    # Convert headers (# ## ### etc.) to plain text with spacing
    ProcessedText = re.sub(r'^#{1,6}\s*(.+)$', r'\1', ProcessedText, flags=re.MULTILINE)
    
    # Remove bold/italic markers (**text**, *text*, __text__, _text_)
    ProcessedText = re.sub(r'\*\*([^*]+)\*\*', r'\1', ProcessedText)
    ProcessedText = re.sub(r'\*([^*]+)\*', r'\1', ProcessedText)
    ProcessedText = re.sub(r'__([^_]+)__', r'\1', ProcessedText)
    ProcessedText = re.sub(r'_([^_]+)_', r'\1', ProcessedText)
    
    # Convert links [text](url) to just text
    ProcessedText = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', ProcessedText)
    
    # Remove reference-style links [text]: url
    ProcessedText = re.sub(r'^\s*\[[^\]]+\]:\s*.+$', '', ProcessedText, flags=re.MULTILINE)
    
    # Convert unordered lists (- * +) to plain text with indentation
    ProcessedText = re.sub(r'^(\s*)[-*+]\s+(.+)$', r'\1\2', ProcessedText, flags=re.MULTILINE)
    
    # Convert ordered lists (1. 2. etc.) to plain text with indentation
    ProcessedText = re.sub(r'^(\s*)\d+\.\s+(.+)$', r'\1\2', ProcessedText, flags=re.MULTILINE)
    
    # Remove blockquotes (>)
    ProcessedText = re.sub(r'^>\s*(.*)$', r'\1', ProcessedText, flags=re.MULTILINE)
    
    # Remove horizontal rules (--- or ***)
    ProcessedText = re.sub(r'^[-*]{3,}$', '', ProcessedText, flags=re.MULTILINE)
    
    # Clean up extra whitespace while preserving paragraph breaks
    ProcessedText = re.sub(r'\n{3,}', '\n\n', ProcessedText)
    ProcessedText = re.sub(r'[ \t]+', ' ', ProcessedText)
    
    # Remove leading/trailing whitespace from lines
    CleanedLines = [Line.strip() for Line in ProcessedText.split('\n')]
    ProcessedText = '\n'.join(CleanedLines)
    
    return ProcessedText.strip()

def ConvertSingleMarkdownFile(SourcePath: str, DestinationPath: Optional[str] = None) -> bool:
    """
    Converts a single Markdown file to plain text with full error handling.
    Follows Himalaya file processing standards with comprehensive logging.
    
    Args:
        SourcePath: Path to source .md file
        DestinationPath: Optional output path, defaults to source path with .txt extension
        
    Returns:
        True if conversion successful, False otherwise
    """
    try:
        # Validate source file existence
        if not os.path.exists(SourcePath):
            logging.error(f"Source file not found: {SourcePath}")
            return False
            
        if not SourcePath.lower().endswith('.md'):
            logging.warning(f"Source file is not a Markdown file: {SourcePath}")
        
        # Determine destination path with PascalCase naming
        if DestinationPath is None:
            BaseFileName = os.path.splitext(os.path.basename(SourcePath))[0]
            DestinationPath = f"{BaseFileName}.txt"
        
        # Ensure destination directory exists
        DestinationDir = os.path.dirname(DestinationPath)
        if DestinationDir and not os.path.exists(DestinationDir):
            os.makedirs(DestinationDir, exist_ok=True)
            logging.info(f"Created destination directory: {DestinationDir}")
        
        # Read markdown content with encoding validation
        with open(SourcePath, 'r', encoding='utf-8') as SourceFile:
            MarkdownContent = SourceFile.read()
        
        # Process markdown to plain text
        ConvertedText = ProcessMarkdownToText(MarkdownContent)
        
        # Write output file with UTF-8 encoding
        with open(DestinationPath, 'w', encoding='utf-8') as DestinationFile:
            DestinationFile.write(ConvertedText)
        
        logging.info(f"Successfully converted: {SourcePath} ‚Üí {DestinationPath}")
        return True
        
    except Exception as ProcessingError:
        logging.error(f"Failed to convert {SourcePath}: {ProcessingError}")
        return False

def ProcessMarkdownDirectory(SourceDirectory: str, DestinationDirectory: Optional[str] = None) -> int:
    """
    Processes all .md files in a directory to .txt files with batch processing.
    Generates comprehensive status report and audit trail.
    
    Args:
        SourceDirectory: Path to directory containing .md files
        DestinationDirectory: Optional output directory, defaults to same as source
        
    Returns:
        Number of files successfully converted
    """
    if not os.path.isdir(SourceDirectory):
        logging.error(f"Source directory not found: {SourceDirectory}")
        return 0
    
    SuccessfulConversions = 0
    ProcessingErrors = 0
    MarkdownFileList = [FileName for FileName in os.listdir(SourceDirectory) if FileName.lower().endswith('.md')]
    
    if not MarkdownFileList:
        logging.warning(f"No .md files found in directory: {SourceDirectory}")
        return 0
    
    logging.info(f"Found {len(MarkdownFileList)} Markdown files to process")
    
    for FileName in MarkdownFileList:
        SourceFilePath = os.path.join(SourceDirectory, FileName)
        
        if DestinationDirectory:
            os.makedirs(DestinationDirectory, exist_ok=True)
            BaseFileName = os.path.splitext(FileName)[0]
            DestinationFilePath = os.path.join(DestinationDirectory, f"{BaseFileName}.txt")
        else:
            DestinationFilePath = None
        
        if ConvertSingleMarkdownFile(SourceFilePath, DestinationFilePath):
            SuccessfulConversions += 1
        else:
            ProcessingErrors += 1
    
    logging.info(f"Batch processing completed: {SuccessfulConversions} successful, {ProcessingErrors} errors")
    logging.info(f"Directory processing summary: {SourceDirectory} ‚Üí {DestinationDirectory or 'same directory'}")
    return SuccessfulConversions

def ExecuteMarkdownConversion():
    """
    Main execution function for command-line usage.
    Handles both single file and directory batch processing with comprehensive error handling.
    
    Usage: python MarkdownToText.py <source_file_or_directory> [destination_path]
    
    Examples:
        python MarkdownToText.py Document.md
        python MarkdownToText.py Document.md ConvertedDocument.txt
        python MarkdownToText.py ./MarkdownFiles/
        python MarkdownToText.py ./MarkdownFiles/ ./TextFiles/
    """
    if len(sys.argv) < 2:
        print("Usage: python MarkdownToText.py <source_file_or_directory> [destination_path]")
        print("Examples:")
        print("  python MarkdownToText.py Document.md")
        print("  python MarkdownToText.py Document.md ConvertedDocument.txt")
        print("  python MarkdownToText.py ./SourceDocs/")
        print("  python MarkdownToText.py ./SourceDocs/ ./ConvertedText/")
        print("\nHimalaya Markdown to Text Converter - AIDEV-PascalCase-1.7")
        sys.exit(1)
    
    SourcePath = sys.argv[1]
    DestinationPath = sys.argv[2] if len(sys.argv) > 2 else None
    
    print(f"[MarkdownToText] Himalaya conversion process starting...")
    ExecutionStartTime = datetime.now()
    
    if os.path.isfile(SourcePath):
        ConversionSuccess = ConvertSingleMarkdownFile(SourcePath, DestinationPath)
        if ConversionSuccess:
            print(f"[MarkdownToText] Single file conversion completed successfully")
        else:
            print(f"[MarkdownToText] Single file conversion failed - check logs for details")
            sys.exit(1)
    elif os.path.isdir(SourcePath):
        ProcessedFileCount = ProcessMarkdownDirectory(SourcePath, DestinationPath)
        print(f"[MarkdownToText] Directory batch processing completed: {ProcessedFileCount} files converted")
        if ProcessedFileCount == 0:
            print(f"[MarkdownToText] Warning: No files were successfully converted")
    else:
        print(f"[MarkdownToText] Error: Source path not found: {SourcePath}")
        sys.exit(1)
    
    ExecutionEndTime = datetime.now()
    TotalDuration = (ExecutionEndTime - ExecutionStartTime).total_seconds()
    print(f"[MarkdownToText] Total execution time: {TotalDuration:.2f} seconds")
    print(f"[MarkdownToText] Himalaya conversion process completed successfully")

if __name__ == "__main__":
    ExecuteMarkdownConversion()
================
File: Scripts/System/UpdateFiles.py
================
# File: CliveJob.py
# Path: ProjectHimalaya/UpdateFiles.py
# Standard: AIDEV-PascalCase-1.7
# Created: 2025-06-05
# Last Modified: 2025-06-26  17:45 PM
"""
Description: Clive's Job ‚Äì Himalaya-standard update/move/archive utility.
Processes Updates folder, reads header for intended path, enforces PascalCase for all
created directories and files (unless ecosystem exception), archives old copies,
generates audit/status report, with full error handling, logging, and audit trail.

Fixed: Now ignores base directory from header paths and uses relative paths from current directory.
Fixed: Regex now handles both comment-style (# Path:) and docstring-style (Path:) headers.
Fixed: Better handling of absolute paths with leading slashes.
"""

import os
import re
import shutil
import logging
from datetime import datetime

# --- CONSTANTS ---
UPDATES_DIR = 'Updates'
ARCHIVE_DIR = 'Archive'
DOCS_BASE = 'Docs'
DOCS_UPDATES = os.path.join(DOCS_BASE, 'Updates')
DATE_FMT = "%Y-%m-%d"
TS_FMT = "%Y-%m-%d_%H-%M-%S"

logging.basicConfig(
    level=logging.INFO,
    format='[CliveJob] %(levelname)s: %(message)s'
)

def ToPascalCase(Segment: str) -> str:
    """
    Converts any file or directory segment to Himalaya PascalCase.
    Preserves extension (lowercase), applies PascalCase to base.
    Preserves already-good PascalCase filenames.
    """
    # Ecosystem exceptions
    if Segment in ('__init__.py', 'setup.py'):
        return Segment

    # Handle file extension (only split at LAST dot)
    if '.' in Segment and not Segment.startswith('.'):
        Base, Ext = Segment.rsplit('.', 1)
        Ext = Ext.lower()
    else:
        Base, Ext = Segment, ''

    # Check if Base is already in good PascalCase format
    if IsAlreadyPascalCase(Base):
        logging.info(f"Preserving already-good PascalCase: '{Base}'")
        return f"{Base}.{Ext}" if Ext else Base

    # Remove all non-alphanumeric separators, PascalCase the rest
    Words = re.split(r'[\s_\-]+', Base)
    Pascal = ''.join(Word.capitalize() for Word in Words if Word)

    return f"{Pascal}.{Ext}" if Ext else Pascal

def IsAlreadyPascalCase(Text: str) -> bool:
    """
    Check if text is already in acceptable PascalCase format.
    Returns True if the text should be preserved as-is.
    """
    # Must start with uppercase letter
    if not Text or not Text[0].isupper():
        return False
    
    # Must be all alphanumeric
    if not Text.isalnum():
        return False
    
    # Check for reasonable PascalCase pattern:
    # - Starts with uppercase
    # - Has at least one more uppercase letter (indicating word boundaries)
    # - No consecutive uppercase letters (avoid ALL_CAPS)
    uppercase_count = sum(1 for c in Text if c.isupper())
    
    # If it's all one word (like "Script"), allow it
    if len(Text) <= 8 and uppercase_count == 1:
        return True
    
    # For longer names, require multiple uppercase letters (PascalCase pattern)
    # but not too many (avoid ALLCAPS)
    if uppercase_count >= 2 and uppercase_count <= len(Text) // 2:
        # Check for consecutive uppercase (avoid "XMLHTTPRequest" style)
        consecutive_upper = any(Text[i].isupper() and Text[i+1].isupper() 
                               for i in range(len(Text)-1))
        if not consecutive_upper:
            return True
    
    return False

def PascalCasePath(Path: str) -> str:
    """
    Applies ToPascalCase to every segment of a path (directories and filename).
    """
    Path = Path.replace('\\', '/')
    Segments = Path.split('/')
    PascalSegments = [ToPascalCase(Segment) for Segment in Segments if Segment]
    return '/'.join(PascalSegments)

def ReadHeaderTargetPath(FilePath: str) -> str:
    """
    Extracts intended path from file header ('Path: ...'), removes base directory,
    and PascalCases the remaining relative path.
    
    Example: 'Path: ProjectHimalaya/CliveJob.py' becomes './CliveJob.py'
    Example: 'Path: /BowersWorld-com/SetupSearchSystem_v2.py' becomes './SetupSearchSystem_v2.py'
    """
    try:
        with open(FilePath, 'r', encoding='utf-8') as File:
            for _ in range(15):  # Check first 15 lines for header (docstrings can be longer)
                Line = File.readline()
                if not Line:  # End of file
                    break
                    
                # Match both comment-style and docstring-style paths
                # Handles: # Path: ... OR Path: ... (without #)
                Match = re.match(r'(?:#\s*)?Path:\s*(.+)', Line.strip())
                if Match:
                    FullPath = Match.group(1).strip()
                    logging.info(f"Found header path: '{FullPath}' in {FilePath}")
                    
                    # Remove base directory and use relative path
                    RelativePath = StripBaseDirectory(FullPath)
                    
                    if RelativePath:
                        FinalPath = PascalCasePath(RelativePath)
                        logging.info(f"Processed path: '{FullPath}' -> '{RelativePath}' -> '{FinalPath}'")
                        return FinalPath
                    else:
                        logging.warning(f"Empty path after stripping base directory from: {FullPath}")
                        return None
    except Exception as Error:
        logging.warning(f"Error reading header from {FilePath}: {Error}")
    return None

def StripBaseDirectory(Path: str) -> str:
    """
    Removes the base directory from a path, returning the relative path.
    Handles both relative and absolute paths.
    
    Examples:
    - 'ProjectHimalaya/CliveJob.py' -> 'CliveJob.py'
    - '/BowersWorld-com/SetupSearchSystem_v2.py' -> 'SetupSearchSystem_v2.py' 
    - 'SomeProject/Scripts/AutoUpdate.py' -> 'Scripts/AutoUpdate.py'
    - 'SingleFile.py' -> 'SingleFile.py'
    """
    # Normalize path separators and remove leading/trailing slashes
    Path = Path.replace('\\', '/').strip('/')
    
    # Split into segments
    Segments = [Segment for Segment in Path.split('/') if Segment]
    
    if len(Segments) <= 1:
        # If only one segment (filename only), return as-is
        return Path
    else:
        # Remove first segment (base directory) and rejoin
        RelativeSegments = Segments[1:]
        RelativePath = '/'.join(RelativeSegments)
        logging.info(f"Stripped base directory: '{Path}' -> '{RelativePath}'")
        return RelativePath

def ArchiveExisting(TargetPath: str) -> str:
    """
    If file exists, moves it to Archive dir (PascalCase), adds timestamp.
    """
    if os.path.exists(TargetPath):
        ArchiveDir = os.path.join(ARCHIVE_DIR, os.path.dirname(TargetPath))
        os.makedirs(ArchiveDir, exist_ok=True)
        BaseName = os.path.basename(TargetPath)
        TimeStamp = datetime.now().strftime(TS_FMT)
        if '.' in BaseName and not BaseName.startswith('.'):
            Base, Ext = BaseName.rsplit('.', 1)
            Ext = Ext.lower()
        else:
            Base, Ext = BaseName, ''
        ArchiveName = f"{ToPascalCase(Base)}_{TimeStamp}{'.' + Ext if Ext else ''}"
        ArchivePath = os.path.join(ArchiveDir, ArchiveName)
        shutil.move(TargetPath, ArchivePath)
        logging.info(f"Archived old file: {TargetPath} ‚Üí {ArchivePath}")
        return ArchivePath
    return None

def MoveOrCopyFile(SourcePath: str, DestPath: str) -> None:
    """
    Moves file, archiving old if needed, ensuring PascalCase on all dirs/files.
    """
    # Ensure destination directory exists
    DestDir = os.path.dirname(DestPath)
    if DestDir:  # Only create if there's a directory component
        os.makedirs(DestDir, exist_ok=True)
    
    # Archive existing file if it exists
    ArchiveExisting(DestPath)
    
    # Move the file
    shutil.move(SourcePath, DestPath)
    logging.info(f"Moved: {SourcePath} ‚Üí {DestPath}")

def ProcessUpdates() -> None:
    """
    Processes all files in Updates folder with full Himalaya + PascalCase enforcement.
    Now correctly handles relative paths by stripping base directories from headers.
    """
    Today = datetime.now().strftime(DATE_FMT)
    StatusEntries = []
    os.makedirs(DOCS_UPDATES, exist_ok=True)

    # Check if Updates directory exists
    if not os.path.exists(UPDATES_DIR):
        logging.warning(f"Updates directory '{UPDATES_DIR}' does not exist!")
        return

    for FileName in os.listdir(UPDATES_DIR):
        SourcePath = os.path.join(UPDATES_DIR, FileName)
        if not os.path.isfile(SourcePath):
            continue
            
        HeaderPath = ReadHeaderTargetPath(SourcePath)
        FileExt = os.path.splitext(FileName)[1].lower()
        Status = {'File': FileName, 'Result': '', 'Detail': ''}
        
        try:
            # .md/.txt: move to Docs/YYYY-MM-DD/ (original name for doc provenance)
            if FileExt in ['.md', '.txt']:
                DocsDayDir = os.path.join(DOCS_BASE, Today)
                DestPath = os.path.join(DocsDayDir, FileName)
                MoveOrCopyFile(SourcePath, DestPath)
                Status['Result'] = 'Moved to Docs (dated, original filename)'
                Status['Detail'] = DestPath
                
            elif HeaderPath:
                # Use the relative path (base directory already stripped)
                DestPath = HeaderPath
                MoveOrCopyFile(SourcePath, DestPath)
                Status['Result'] = 'Moved by header path (base directory stripped, PascalCase applied)'
                Status['Detail'] = DestPath
                
            else:
                Status['Result'] = 'Skipped (no header path, not doc)'
                Status['Detail'] = f"Kept in: {SourcePath}"
                logging.warning(f"Skipped: {FileName} (no header path and not .md/.txt)")
                
        except Exception as Error:
            Status['Result'] = 'Error'
            Status['Detail'] = str(Error)
            logging.error(f"Failed processing {FileName}: {Error}")
            
        StatusEntries.append(Status)

    # Write status report
    ReportTimeStamp = datetime.now().strftime(TS_FMT)
    ReportPath = os.path.join(DOCS_UPDATES, f'Updates_{ReportTimeStamp}.md')
    
    with open(ReportPath, 'w', encoding='utf-8') as Report:
        Report.write(f"# Updates Status Report ‚Äî {ReportTimeStamp}\n\n")
        Report.write(f"**Total files processed:** {len(StatusEntries)}\n\n")
        
        # Summary counts
        Moved = sum(1 for entry in StatusEntries if 'Moved' in entry['Result'])
        Skipped = sum(1 for entry in StatusEntries if 'Skipped' in entry['Result'])
        Errors = sum(1 for entry in StatusEntries if 'Error' in entry['Result'])
        
        Report.write(f"**Summary:**\n")
        Report.write(f"- ‚úÖ Moved: {Moved}\n")
        Report.write(f"- ‚è≠Ô∏è Skipped: {Skipped}\n")
        Report.write(f"- ‚ùå Errors: {Errors}\n\n")
        Report.write(f"**Details:**\n\n")
        
        for Entry in StatusEntries:
            # Add emoji based on result
            if 'Moved' in Entry['Result']:
                Emoji = '‚úÖ'
            elif 'Skipped' in Entry['Result']:
                Emoji = '‚è≠Ô∏è'
            elif 'Error' in Entry['Result']:
                Emoji = '‚ùå'
            else:
                Emoji = '‚ùì'
                
            Report.write(f"- {Emoji} **{Entry['File']}**: {Entry['Result']}  \n")
            Report.write(f"    `{Entry['Detail']}`\n\n")
            
    print(f"\n[CliveJob] Status report written: {ReportPath}")
    print(f"[CliveJob] Summary - Moved: {Moved}, Skipped: {Skipped}, Errors: {Errors}")

if __name__ == "__main__":
    print("[CliveJob] Himalaya file processor starting...")
    print("[CliveJob] Fixed version - now strips base directories from header paths")
    ProcessUpdates()
    print("[CliveJob] All done. Review status report for details.")

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project Himalaya - BowersWorld.com</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            min-height: 100vh;
        }

        .header {
            background: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3));
            padding: 2rem 0;
            text-align: center;
            border-bottom: 2px solid rgba(255,255,255,0.1);
        }

        .sponsored {
            position: absolute;
            top: 10px;
            right: 20px;
            font-size: 0.8rem;
            opacity: 0.7;
        }

        .hero-image {
            width: 100%;
            max-width: 800px;
            height: 200px;
            background: linear-gradient(45deg, #4a90e2, #7b68ee);
            border-radius: 10px;
            margin: 0 auto 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        .hands {
            font-size: 4rem;
            display: flex;
            align-items: center;
            gap: 2rem;
        }

        .robot-hand { color: #ff6b6b; }
        .human-hand { color: #4ecdc4; }
        .connection { 
            color: #ffd93d; 
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.7; transform: scale(1.1); }
        }

        h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .description {
            max-width: 800px;
            margin: 0 auto;
            line-height: 1.6;
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .section-title {
            text-align: center;
            font-size: 2rem;
            margin: 2rem 0;
            color: #a78bfa;
        }

        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .card {
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
            padding: 1.5rem;
            border: 1px solid rgba(255,255,255,0.2);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .card:hover {
            transform: translateY(-5px);
            background: rgba(255,255,255,0.15);
            border-color: rgba(255,255,255,0.3);
        }

        .card h3 {
            font-size: 1.3rem;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .card p {
            opacity: 0.8;
            line-height: 1.5;
        }

        /* Library Card Styling */
        .library-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: 2px solid #ffd93d;
            position: relative;
            overflow: hidden;
        }

        .library-card::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
            transform: rotate(45deg);
            animation: shine 3s infinite;
        }

        @keyframes shine {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            50% { transform: translateX(0%) translateY(0%) rotate(45deg); }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }

        .library-card h3 {
            color: #ffd93d;
            font-size: 1.5rem;
        }

        .library-badge {
            background: #ffd93d;
            color: #1e3c72;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .footer {
            text-align: center;
            padding: 2rem;
            border-top: 1px solid rgba(255,255,255,0.1);
            opacity: 0.7;
            font-size: 0.9rem;
        }

        .chevron {
            transition: transform 0.3s ease;
        }

        .card:hover .chevron {
            transform: translateX(5px);
        }

        .success-banner {
            background: rgba(76, 175, 80, 0.3);
            border: 1px solid #4CAF50;
            border-radius: 5px;
            padding: 1rem;
            margin: 1rem 0;
            text-align: center;
        }

        .live-indicator {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(76, 175, 80, 0.9);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: bold;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }

        .live-indicator::before {
            content: 'üü¢';
            margin-right: 0.5rem;
        }
    </style>
</head>
<body>
    <div class="sponsored">Sponsored by BowersWorld.com</div>
    
    <header class="header">
        <div class="hero-image">
            <div class="hands">
                <span class="robot-hand">ü§ñ</span>
                <span class="connection">‚ú®</span>
                <span class="human-hand">üë§</span>
            </div>
        </div>
        
        <h1>Project Himalaya</h1>
        
        <div class="description">
            <p>Project Himalaya pioneers a new symbiotic partnership between humans and AI, transcending traditional models where AI serves merely as a tool. We envision AI and humans working together, each contributing unique strengths to achieve what neither could accomplish alone.</p>
            <br>
            <p>Our work focuses on developing methodologies, frameworks, and tools that enable seamless knowledge transfer between humans and AI agents. We address key challenges in building complex AI systems‚Äîmaintaining context across sessions, ensuring knowledge persistence, and facilitating effective communication. Together, we're creating a future where AI is not just a tool, but a true partner in human innovation.</p>
        </div>
    </header>

    <main class="container">
        <!-- Success Banner -->
        <div class="success-banner">
            <strong>üéâ GitHub Pages is now live!</strong> Your BowersWorld.com test site is successfully deployed.
        </div>

        <h2 class="section-title">Project Documentation</h2>
        
        <div class="cards-grid">
            <div class="card">
                <h3>
                    Navigation & Status
                    <span class="chevron">‚ñº</span>
                </h3>
                <p>Current project status, roadmap, and navigation tools for Project Himalaya development.</p>
            </div>

            <div class="card">
                <h3>
                    Project Vision
                    <span class="chevron">‚ñº</span>
                </h3>
                <p>Core philosophy and long-term goals for human-AI collaboration methodologies.</p>
            </div>

            <div class="card">
                <h3>
                    Standards
                    <span class="chevron">‚ñº</span>
                </h3>
                <p>AIDEV-PascalCase-1.7 coding standards and development guidelines.</p>
            </div>

            <div class="card">
                <h3>
                    Templates
                    <span class="chevron">‚ñº</span>
                </h3>
                <p>Reusable code templates and project scaffolding tools.</p>
            </div>

            <div class="card">
                <h3>
                    Knowledge Organization
                    <span class="chevron">‚ñº</span>
                </h3>
                <p>Frameworks for organizing and transferring knowledge between human and AI collaborators.</p>
            </div>

            <div class="card">
                <h3>
                    Framework Implementation
                    <span class="chevron">‚ñº</span>
                </h3>
                <p>Technical implementation details and architectural patterns.</p>
            </div>

            <!-- NEW LIBRARY CARD -->
            <div class="card library-card" onclick="showLibraryInfo()">
                <h3>
                    Anderson's Digital Library
                    <span class="library-badge">NEW</span>
                </h3>
                <p>Access our comprehensive digital book collection. Browse, search, and read thousands of titles in our secure online library. <strong>Registration required.</strong></p>
            </div>
        </div>
    </main>

    <footer class="footer">
        <p>¬© 2025 Project Himalaya. All rights reserved. Sponsored by BowersWorld.com</p>
        <p style="margin-top: 0.5rem; font-size: 0.8rem; opacity: 0.6;">
            Test deployment: https://callmechewy.github.io/BowersWorld-com/
        </p>
    </footer>

    <!-- Live Indicator -->
    <div class="live-indicator">GitHub Pages Live</div>

    <script>
        function showLibraryInfo() {
            alert('üöß Anderson\'s Library - Coming Soon!\n\nThis digital library system is under development. Features will include:\n\nüìö Thousands of books\nüîç Advanced search\nüì± Mobile interface\nüîí User authentication\nüíæ Offline reading\n\nFull functionality available soon!');
        }

        // Add click handlers for existing cards (expandable sections)
        document.querySelectorAll('.card:not(.library-card)').forEach(card => {
            card.addEventListener('click', function() {
                const chevron = this.querySelector('.chevron');
                if (chevron) {
                    if (chevron.textContent === '‚ñº') {
                        chevron.textContent = '‚ñ≤';
                        // Add expansion logic here later
                    } else {
                        chevron.textContent = '‚ñº';
                        // Add collapse logic here later
                    }
                }
            });
        });

        // Development mode logging
        console.log('üöÄ BowersWorld.com - GitHub Pages Test Site');
        console.log('üìç Current URL:', window.location.href);
        console.log('‚úÖ Site successfully deployed!');
    </script>
</body>
</html>
================
File: library/auth/login.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Anderson's Library</title>
</head>
<body style="background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%); color: white; font-family: 'Segoe UI', sans-serif; min-height: 100vh; display: flex; align-items: center; justify-content: center;">
    <div style="background: rgba(255,255,255,0.1); padding: 2rem; border-radius: 10px; max-width: 400px; width: 90%; text-align: center;">
        <h1 style="color: #ffd93d; margin-bottom: 1rem;">üîê Login</h1>
        <p style="margin-bottom: 2rem;">Coming soon! Authentication system in development.</p>
        <a href="../" style="background: #ffd93d; color: #1e3c72; padding: 0.8rem 1.5rem; border-radius: 5px; text-decoration: none; font-weight: bold;">‚Üê Back to Library</a>
    </div>
</body>
</html>

================
File: library/auth/register.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register - Anderson's Library</title>
</head>
<body style="background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%); color: white; font-family: 'Segoe UI', sans-serif; min-height: 100vh; display: flex; align-items: center; justify-content: center;">
    <div style="background: rgba(255,255,255,0.1); padding: 2rem; border-radius: 10px; max-width: 400px; width: 90%; text-align: center;">
        <h1 style="color: #ffd93d; margin-bottom: 1rem;">üìù Registration</h1>
        <p style="margin-bottom: 2rem;">Coming soon! Registration system in development.</p>
        <a href="../" style="background: #ffd93d; color: #1e3c72; padding: 0.8rem 1.5rem; border-radius: 5px; text-decoration: none; font-weight: bold;">‚Üê Back to Library</a>
    </div>
</body>
</html>

================
File: library/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project Himalaya - BowersWorld.com</title>
    <link rel="stylesheet" href="shared/css/himalaya-theme.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            min-height: 100vh;
        }

        .header {
            background: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), 
                        url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 400"><path d="M0,400 C200,300 400,350 600,250 C800,150 1000,200 1200,100 L1200,400 Z" fill="%23ffffff10"/></svg>');
            background-size: cover;
            background-position: center;
            padding: 2rem 0;
            text-align: center;
            border-bottom: 2px solid rgba(255,255,255,0.1);
        }

        .sponsored {
            position: absolute;
            top: 10px;
            right: 20px;
            font-size: 0.8rem;
            opacity: 0.7;
        }

        .hero-image {
            width: 100%;
            max-width: 800px;
            height: 200px;
            background: linear-gradient(45deg, #4a90e2, #7b68ee);
            border-radius: 10px;
            margin: 0 auto 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        .hands {
            font-size: 4rem;
            display: flex;
            align-items: center;
            gap: 2rem;
        }

        .robot-hand { color: #ff6b6b; }
        .human-hand { color: #4ecdc4; }
        .connection { 
            color: #ffd93d; 
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.7; transform: scale(1.1); }
        }

        h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .description {
            max-width: 800px;
            margin: 0 auto;
            line-height: 1.6;
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .section-title {
            text-align: center;
            font-size: 2rem;
            margin: 2rem 0;
            color: #a78bfa;
        }

        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .card {
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
            padding: 1.5rem;
            border: 1px solid rgba(255,255,255,0.2);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .card:hover {
            transform: translateY(-5px);
            background: rgba(255,255,255,0.15);
            border-color: rgba(255,255,255,0.3);
        }

        .card h3 {
            font-size: 1.3rem;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .card-icon {
            font-size: 1.5rem;
        }

        .card p {
            opacity: 0.8;
            line-height: 1.5;
        }

        /* Library Card Styling */
        .library-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: 2px solid #ffd93d;
            position: relative;
            overflow: hidden;
        }

        .library-card::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
            transform: rotate(45deg);
            animation: shine 3s infinite;
        }

        @keyframes shine {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            50% { transform: translateX(0%) translateY(0%) rotate(45deg); }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }

        .library-card h3 {
            color: #ffd93d;
            font-size: 1.5rem;
        }

        .library-badge {
            background: #ffd93d;
            color: #1e3c72;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .footer {
            text-align: center;
            padding: 2rem;
            border-top: 1px solid rgba(255,255,255,0.1);
            opacity: 0.7;
            font-size: 0.9rem;
        }

        .chevron {
            transition: transform 0.3s ease;
        }

        .card:hover .chevron {
            transform: translateX(5px);
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            padding: 2rem;
            border-radius: 10px;
            border: 1px solid rgba(255,255,255,0.2);
            max-width: 400px;
            width: 90%;
        }

        .btn {
            background: #ffd93d;
            color: #1e3c72;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            text-decoration: none;
            display: inline-block;
            margin: 0.5rem;
            transition: all 0.3s ease;
        }

        .btn:hover {
            background: #ffed4e;
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: transparent;
            color: white;
            border: 1px solid white;
        }

        .btn-secondary:hover {
            background: rgba(255,255,255,0.1);
            color: white;
        }
    </style>
</head>
<body>
    <div class="sponsored">Sponsored by BowersWorld.com</div>
    
    <header class="header">
        <div class="hero-image">
            <div class="hands">
                <span class="robot-hand">ü§ñ</span>
                <span class="connection">‚ú®</span>
                <span class="human-hand">üë§</span>
            </div>
        </div>
        
        <h1>Project Himalaya</h1>
        
        <div class="description">
            <p>Project Himalaya pioneers a new symbiotic partnership between humans and AI, transcending traditional models where AI serves merely as a tool. We envision AI and humans working together, each contributing unique strengths to achieve what neither could accomplish alone.</p>
            <br>
            <p>Our work focuses on developing methodologies, frameworks, and tools that enable seamless knowledge transfer between humans and AI agents. We address key challenges in building complex AI systems‚Äîmaintaining context across sessions, ensuring knowledge persistence, and facilitating effective communication. Together, we're creating a future where AI is not just a tool, but a true partner in human innovation.</p>
        </div>
    </header>

    <main class="container">
        <h2 class="section-title">Project Documentation</h2>
        
        <div class="cards-grid">
            <div class="card">
                <h3>
                    Navigation & Status
                    <span class="chevron">‚ñº</span>
                </h3>
                <p>Current project status, roadmap, and navigation tools for Project Himalaya development.</p>
            </div>

            <div class="card">
                <h3>
                    Project Vision
                    <span class="chevron">‚ñº</span>
                </h3>
                <p>Core philosophy and long-term goals for human-AI collaboration methodologies.</p>
            </div>

            <div class="card">
                <h3>
                    Standards
                    <span class="chevron">‚ñº</span>
                </h3>
                <p>AIDEV-PascalCase-1.7 coding standards and development guidelines.</p>
            </div>

            <div class="card">
                <h3>
                    Templates
                    <span class="chevron">‚ñº</span>
                </h3>
                <p>Reusable code templates and project scaffolding tools.</p>
            </div>

            <div class="card">
                <h3>
                    Knowledge Organization
                    <span class="chevron">‚ñº</span>
                </h3>
                <p>Frameworks for organizing and transferring knowledge between human and AI collaborators.</p>
            </div>

            <div class="card">
                <h3>
                    Framework Implementation
                    <span class="chevron">‚ñº</span>
                </h3>
                <p>Technical implementation details and architectural patterns.</p>
            </div>

            <!-- NEW LIBRARY CARD -->
            <div class="card library-card" onclick="openLibraryPortal()">
                <h3>
                    Anderson's Digital Library
                    <span class="library-badge">NEW</span>
                </h3>
                <p>Access our comprehensive digital book collection. Browse, search, and read thousands of titles in our secure online library. <strong>Registration required.</strong></p>
            </div>
        </div>
    </main>

    <footer class="footer">
        <p>¬© 2025 Project Himalaya. All rights reserved. Sponsored by BowersWorld.com</p>
    </footer>

    <!-- Library Portal Modal -->
    <div id="libraryModal" class="modal">
        <div class="modal-content">
            <h3 style="margin-bottom: 1rem; color: #ffd93d;">üìö Anderson's Digital Library</h3>
            <p style="margin-bottom: 1rem;">Welcome to our comprehensive digital book collection! Access requires registration and approval.</p>
            
            <div style="margin-bottom: 1.5rem;">
                <strong>Library Features:</strong><br>
                ‚Ä¢ Thousands of books across multiple categories<br>
                ‚Ä¢ Advanced search and filtering<br>
                ‚Ä¢ Secure user authentication<br>
                ‚Ä¢ Mobile-friendly interface
            </div>
            
            <a href="library/" class="btn">Enter Library Portal</a>
            <button onclick="closeModal()" class="btn btn-secondary">Close</button>
        </div>
    </div>

    <script>
        function openLibraryPortal() {
            document.getElementById('libraryModal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('libraryModal').style.display = 'none';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('libraryModal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        }

        // Add click handlers for existing cards (expandable sections)
        document.querySelectorAll('.card:not(.library-card)').forEach(card => {
            card.addEventListener('click', function() {
                const chevron = this.querySelector('.chevron');
                if (chevron.textContent === '‚ñº') {
                    chevron.textContent = '‚ñ≤';
                    // Add expansion logic here later
                } else {
                    chevron.textContent = '‚ñº';
                    // Add collapse logic here later
                }
            });
        });

        // Development mode indicator
        if (window.location.hostname.includes('github.io')) {
            console.log('üöÄ Running on GitHub Pages test environment');
            console.log('üîß Development mode: All features may not be fully functional');
        }
    </script>
</body>
</html>
================
File: requirements.txt
================
fastapi>=0.104.1\nuvicorn[standard]>=0.24.0\nsqlalchemy>=2.0.0\njinja2>=3.1.2\npandas>=2.1.0\nrequests>=2.31.0

================================================================
List of Included Files
================================================================

Files included:
BowersWorldSetup.py
CreateLibraryCSV/Complete Anderson's Library Collection Analysis.py
CreateLibraryCSV/Resumable PDF Metadata Extractor.py
CreateThumbs/ConvertToThumbnails.py
CreateThumbs/ConvertToThumbnailsPart2.py
DigitalAlexandria.py
README.md
Scripts/System/CodebaseSum.py
Scripts/System/GitHubAutoUpdate.py
Scripts/System/GitHubUpdateSite.py
Scripts/System/MarkdownToText.py
Scripts/System/UpdateFiles.py
index.html
library/auth/login.html
library/auth/register.html
library/index.html
requirements.txt

There are 17 files included in the Files section of the CodebaseSummary document.
